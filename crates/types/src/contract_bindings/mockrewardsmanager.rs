/**

Generated by the following Solidity interface...
```solidity
interface MockRewardsManager {
    type BalanceDelta is int256;
    type Currency is address;
    type PoolId is bytes32;
    struct ModifyLiquidityParams {
        int24 tickLower;
        int24 tickUpper;
        int256 liquidityDelta;
        bytes32 salt;
    }
    struct PoolKey {
        Currency currency0;
        Currency currency1;
        uint24 fee;
        int24 tickSpacing;
        address hooks;
    }

    error AssetsOutOfOrderOrNotUnique();
    error MissingHookPermissions(uint160);
    error NotUniswap();
    error OutOfBoundRead(uint256 arrayIndex, uint256 arrayLength);
    error ReaderNotAtEnd();
    error WrongEndLiquidity(uint128, uint128);

    constructor(address uniV4PoolManager);

    function afterRemoveLiquidity(address, PoolKey memory, ModifyLiquidityParams memory, BalanceDelta, bytes memory) external pure returns (bytes4, BalanceDelta);
    function beforeAddLiquidity(address, PoolKey memory, ModifyLiquidityParams memory, bytes memory) external view returns (bytes4);
    function consts() external pure returns (int24 tickSpacing, uint24 poolFee);
    function getGrowthInsideRange(PoolId id, int24 lowerTick, int24 upperTick) external view returns (uint256);
    function getGrowthInsideTick(PoolId id, int24 tick) external view returns (uint256);
    function reward(bytes memory data) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "uniV4PoolManager",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "afterRemoveLiquidity",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct PoolKey",
        "components": [
          {
            "name": "currency0",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "currency1",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "tickSpacing",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "hooks",
            "type": "address",
            "internalType": "contract IHooks"
          }
        ]
      },
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct IPoolManager.ModifyLiquidityParams",
        "components": [
          {
            "name": "tickLower",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "tickUpper",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "liquidityDelta",
            "type": "int256",
            "internalType": "int256"
          },
          {
            "name": "salt",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "",
        "type": "int256",
        "internalType": "BalanceDelta"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes4",
        "internalType": "bytes4"
      },
      {
        "name": "",
        "type": "int256",
        "internalType": "BalanceDelta"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "beforeAddLiquidity",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct PoolKey",
        "components": [
          {
            "name": "currency0",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "currency1",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "tickSpacing",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "hooks",
            "type": "address",
            "internalType": "contract IHooks"
          }
        ]
      },
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct IPoolManager.ModifyLiquidityParams",
        "components": [
          {
            "name": "tickLower",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "tickUpper",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "liquidityDelta",
            "type": "int256",
            "internalType": "int256"
          },
          {
            "name": "salt",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "consts",
    "inputs": [],
    "outputs": [
      {
        "name": "tickSpacing",
        "type": "int24",
        "internalType": "int24"
      },
      {
        "name": "poolFee",
        "type": "uint24",
        "internalType": "uint24"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "getGrowthInsideRange",
    "inputs": [
      {
        "name": "id",
        "type": "bytes32",
        "internalType": "PoolId"
      },
      {
        "name": "lowerTick",
        "type": "int24",
        "internalType": "int24"
      },
      {
        "name": "upperTick",
        "type": "int24",
        "internalType": "int24"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getGrowthInsideTick",
    "inputs": [
      {
        "name": "id",
        "type": "bytes32",
        "internalType": "PoolId"
      },
      {
        "name": "tick",
        "type": "int24",
        "internalType": "int24"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "reward",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "error",
    "name": "AssetsOutOfOrderOrNotUnique",
    "inputs": []
  },
  {
    "type": "error",
    "name": "MissingHookPermissions",
    "inputs": [
      {
        "name": "",
        "type": "uint160",
        "internalType": "uint160"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotUniswap",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OutOfBoundRead",
    "inputs": [
      {
        "name": "arrayIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "arrayLength",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ReaderNotAtEnd",
    "inputs": []
  },
  {
    "type": "error",
    "name": "WrongEndLiquidity",
    "inputs": [
      {
        "name": "",
        "type": "uint128",
        "internalType": "uint128"
      },
      {
        "name": "",
        "type": "uint128",
        "internalType": "uint128"
      }
    ]
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod MockRewardsManager {
    use alloy::sol_types as alloy_sol_types;

    use super::*;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a0806040523461015557602081612f05803803809161001f8285610159565b83398101031261015557516001600160a01b03811690819003610155576080526109008030160361014057604080519081016001600160401b0381118282101761012c575f91829160405260188152602081017f72657761726473206d616e61676572206465706c6f796564000000000000000081526100e160646040518093602082019563104c13eb60e21b8752602060248401525180918160448501528484015e86838284010152601f801991011681010301601f198101835282610159565b51906a636f6e736f6c652e6c6f675afa50604051612d88908161017d823960805181818160fb015281816103540152818161095a01528181610a84015281816115f101526127a80152f35b634e487b7160e01b5f52604160045260245ffd5b630ea7064560e31b5f5261090060045260245ffd5b5f80fd5b601f909101601f19168101906001600160401b0382119082101761012c5760405256fe60806040526004361015610011575f80fd5b5f3560e01c8063259982e51461007457806335e81c701461006f57806362889dd61461006a5780636bc8334f146100655780638db2b652146100605763d86d744e1461005b575f80fd5b610634565b6105b5565b610451565b610398565b610268565b34610195576101607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610195576100ac610199565b506100b6366101bc565b506100c0366101eb565b506101443567ffffffffffffffff8111610195576100e290369060040161021a565b505073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016330361016d577f259982e5000000000000000000000000000000000000000000000000000000006080527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8060a0016080f35b7ff8328614000000000000000000000000000000000000000000000000000000005f5260045ffd5b5f80fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361019557565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc60a091011261019557602490565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3c60809101126101955760c490565b9181601f840112156101955782359167ffffffffffffffff8311610195576020838186019501011161019557565b602435908160020b820361019557565b604435908160020b820361019557565b346101955760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610195576004356102a2610248565b6102da6102ad6106f6565b7f7469636b00000000000000000000000000000000000000000000000000000000602082015282846108bd565b5f8060015b156102f8575b50505f6102f28284610a4c565b916102df565b61030257806102e5565b610384916103949361034261031561070b565b7f6e6578745469636b557000000000000000000000000000000000000000000000602082015284836108bd565b805f52600160205261037860405f20917f0000000000000000000000000000000000000000000000000000000000000000611067565b60a01c60020b90610b67565b6040519081529081906020820190565b0390f35b346101955760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610195576103946103846004356103d8610248565b6103e0610258565b916104196103ec610720565b7f6c6f7765725469636b0000000000000000000000000000000000000000000000602082015283836108bd565b610342610424610720565b7f75707065725469636b0000000000000000000000000000000000000000000000602082015284836108bd565b346101955760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101955760043567ffffffffffffffff8111610195576104a090369060040161021a565b6104fc6104ab610735565b7f5b4d6f636b526577617264734d616e616765725d206c6f6164696e672061737360208201527f65747300000000000000000000000000000000000000000000000000000000006040820152610be2565b610505826117d3565b908082038281116105b0576044900460201b17908160201c5f905f915b8183106105515761054f8688610548888861054361053e6107c8565b610be2565b610cba565b5050610f14565b005b73ffffffffffffffffffffffffffffffffffffffff610570848761113b565b3560601c911681111561058857600190920191610522565b7f80f11acf000000000000000000000000000000000000000000000000000000005f5260045ffd5b6109e8565b34610195576101807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610195576105ed610199565b506105f7366101bc565b50610601366101eb565b506101643567ffffffffffffffff81116101955761062390369060040161021a565b5050604080515f81525f6020820152f35b34610195575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101955760408051603c81525f6020820152f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176106e057604052565b610672565b604051906106f460a08361069f565b565b6040519061070560408361069f565b60048252565b6040519061071a60408361069f565b600a8252565b6040519061072f60408361069f565b60098252565b6040519061074460608361069f565b60238252565b6040519061075960608361069f565b602b8252565b6040519061076e60608361069f565b602a8252565b6040519061078360608361069f565b60308252565b6040519061079860608361069f565b60378252565b604051906107ad60608361069f565b603b8252565b604051906107c260608361069f565b60268252565b6107d0610735565b907f5b4d6f636b526577617264734d616e616765725d20726577617264696e67207060208301527f6f6f6c00000000000000000000000000000000000000000000000000000000006040830152565b805191908290602001825e015f815290565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b1561087c5750565b6108b9906040519182917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484018181520190610831565b0390fd5b6106f4926109e0601061097e610990956fffffffffffffffffffffffffffffffff956109586040516109486019826108f8602082018c61081f565b7f206e6f742066726f6d20726567756c61722073706163696e67000000000000008152037ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff981018452018261069f565b603c8460020b0760020b15610874565b7f0000000000000000000000000000000000000000000000000000000000000000610f44565b5092604051958691602083019061081f565b7f206e6f7420696e697469616c697a6564000000000000000000000000000000008152037ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff081018652018461069f565b161515610874565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b60020b60010190627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008312176105b057565b9190610aa860ff610a7e610a6c610b4d94603c5f81830712910503610a15565b908160020b60081d60010b9160ff1690565b929080967f000000000000000000000000000000000000000000000000000000000000000061175e565b911690811c6001811901167e1f0d1e100c1d070f090b19131c1706010e11080a1a141802121b1503160405601f6101e07f804040554300526644320000502061067405302602000010750620017611707760fc7fb6db6db6ddddddddd34d34d349249249210842108c6318c639ce739cffffffff860260f81c161b60f71c1692831c63d76453e004161a1761010081141591825f14610b50570160ff16905b93611016565b90565b505060ff90610b47565b919082039182116105b057565b9091610b7e81839060020b5f5260205260405f2090565b5493610b9581849060020b5f5260205260405f2090565b549360020b9160020b82125f14610bb257505050610b4d91610b5a565b60020b13610bc857509081039081116105b05790565b600101549182039182116105b05781039081116105b05790565b610c28610c546106f4926040519283917f41304fac0000000000000000000000000000000000000000000000000000000060208401526020602484018181520190610831565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261069f565b6110f0565b60405190610c6860608361069f565b603882527f6173736574732c206275696c64696e6720706f6f6c20696400000000000000006040837f5b506f6f6c526577617264734d616e616765725d2072657472696576696e672060208201520152565b9091610d22604051610ccd60608261069f565b602981527f5b506f6f6c526577617264734d616e616765725d20656e746572696e67205f7260208201527f6577617264506f6f6c00000000000000000000000000000000000000000000006040820152610be2565b610d7e610d2d61074a565b7f5b506f6f6c526577617264734d616e616765725d206465636f64696e6720617360208201527f73657420696e64696365730000000000000000000000000000000000000000006040820152610be2565b60405192610d8d60408561069f565b601284527f7533323a4173736574496e6465785061697200000000000000000000000000006020850152823560e01c92610dc76004612c88565b805160068110610e6c575b50610e42610e30600484610e0f89610e67999a9b610e0985610e03610e499a610dfd610e509d6124ec565b90611825565b936125e1565b916126f2565b0194610e1c61053e610c59565b610e37610e3061ffff8b60101c168361113b565b3560601c90565b9861ffff169061113b565b8630611204565b60a0902090565b610e62815f52600160205260405f2090565b6115b9565b909291565b94929093916040517f2000000000000000000000000000000000000000000000000000000000000000602082015260018152610ea960218261069f565b95600603600681116105b057959660015b15610efd575b5f96600180821614610ee3575b610edc9060011c5b988061249e565b9796610eba565b95610ed5610ef4610edc928b61249e565b97915050610ecd565b86610ec05796509294509092909190610e42610dd2565b910103610f1d57565b6301842f8c5f526004601cfd5b90816020910312610195575190565b6040513d5f823e3d90fd5b610fb290600473ffffffffffffffffffffffffffffffffffffffff95946020945f526006855260405f20905f5201835260405f206040519586809481937f1e2eaeaf000000000000000000000000000000000000000000000000000000008352600483019190602083019252565b0392165afa918215611011575f92610fe0575b506fffffffffffffffffffffffffffffffff82169160801d90565b61100391925060203d60201161100a575b610ffb818361069f565b810190610f2a565b905f610fc5565b503d610ff1565b610f39565b60081b60020b9060ff1660020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213176105b057603c9060020b028060020b9081036105b05790565b602090602461109373ffffffffffffffffffffffffffffffffffffffff945f52600660205260405f2090565b60405194859384927f1e2eaeaf0000000000000000000000000000000000000000000000000000000084526004840152165afa908115611011575f916110d7575090565b610b4d915060203d60201161100a57610ffb818361069f565b5f80916020815191016a636f6e736f6c652e6c6f675afa50565b90670de0b6b3a7640000820291808304670de0b6b3a764000014901517156105b057565b919082018092116105b057565b6111a28260405161114d60608261069f565b603381527f5b41737365745d20417474656d7074696e6720746f207265747269657665206160208201527f737365745b25735d2066726f6d206172726179000000000000000000000000006040820152611a39565b8060201c808310156111d557506044820291808304604414901517156105b05763ffffffff169081018091116105b05790565b827fbc5f997c000000000000000000000000000000000000000000000000000000005f5260045260245260445ffd5b90916040519160a083019280841067ffffffffffffffff8511176106e05773ffffffffffffffffffffffffffffffffffffffff80935f60806112a694610b4d986040528281528260208201528260408201528260608201520152166112898461126b6106e5565b9716879073ffffffffffffffffffffffffffffffffffffffff169052565b73ffffffffffffffffffffffffffffffffffffffff166020860152565b5f6040850152603c60608501521673ffffffffffffffffffffffffffffffffffffffff166080830152565b6112d961075f565b907f5b52657761726473557064617465725d20456e746572696e67205f6465636f6460208301527f65416e64526577617264000000000000000000000000000000000000000000006040830152565b611330610735565b907f5b52657761726473557064617465725d204465636f64696e672073746172745460208301527f69636b00000000000000000000000000000000000000000000000000000000006040830152565b611387610774565b907f5b52657761726473557064617465725d2052657472696576696e6720706f6f6c60208301527f2025782063757272656e74207469636b000000000000000000000000000000006040830152565b6113de610774565b907f5b52657761726473557064617465725d204465636f64696e672075706461746560208301527f207374617274206c6971756964697479000000000000000000000000000000006040830152565b611435610789565b907f5b52657761726473557064617465725d204465636f64696e6720626f756e647360208301527f206f662072657761726420616d6f756e7473206c6973740000000000000000006040830152565b61148c61075f565b907f5b52657761726473557064617465725d205374617274696e6720636f7265207260208301527f6577617264206c6f6f70000000000000000000000000000000000000000000006040830152565b604051906114ea60808361069f565b604382527f69747900000000000000000000000000000000000000000000000000000000006060837f5b52657761726473557064617465725d20436f6d706c6574656420636f72652060208201527f726577617264206c6f6f702c20636865636b696e6720656e64206c697175696460408201520152565b61156a61079e565b907f5b52657761726473557064617465725d205570646174696e6720676c6f62616c60208301527f2067726f7774682062792063756d756c617469766547726f77746800000000006040830152565b6115dc61169094936115cc61053e6112d1565b6115d761053e611328565b611ab3565b91906115ef846115ea61137f565b611a39565b7f0000000000000000000000000000000000000000000000000000000000000000926116518561163f61162e6116258389611067565b60a01c60020b90565b9461163a61053e6113d6565b611b01565b929061164c61053e61142d565b6117d3565b939061165e61053e611484565b600286810b9083900b136117215761167695876122b2565b9197929590949192915b61168b61053e6114db565b612be6565b906fffffffffffffffffffffffffffffffff82166fffffffffffffffffffffffffffffffff8216036116de57505060016116d8916116cf61053e611562565b0191825461112e565b90559190565b7f6429cfd2000000000000000000000000000000000000000000000000000000005f526fffffffffffffffffffffffffffffffff9081166004521660245260445ffd5b90611733949392916117509688611f7e565b9293919290916fffffffffffffffffffffffffffffffff90911690565b919792959094919291611680565b600573ffffffffffffffffffffffffffffffffffffffff936020935f526006845260405f20905f52018252602460405f2060405194859384927f1e2eaeaf0000000000000000000000000000000000000000000000000000000084526004840152165afa908115611011575f916110d7575090565b906118156040516117e560408261069f565b600f81527f7532342f4c6973742e6c656e67746800000000000000000000000000000000006020820152836118e4565b600380830192803560e81c010190565b600c6106f49161189461186a9594836040519788947f5b43414c4c444154415245414445525d2072656164696e67206e6578742000006020870152603e86019061081f565b7f20627974652873292061742000000000000000000000000000000000000000008152019061081f565b7f206173202573202d3e20257300000000000000000000000000000000000000008152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec81018552018361069f565b9190916118f16003612c88565b80516006811061191e575b5092610e0960036119146106f49596610dfd866124ec565b933560e81c6125e1565b9290916040517f200000000000000000000000000000000000000000000000000000000000000060208201526001815261195960218261069f565b93600603600681116105b057939460015b156119ad575b5f94600180821614611993575b61198c9060011c5b968061249e565b959461196a565b936119856119a461198c928961249e565b9591505061197d565b8461197057945090925090610e096118fc565b611a07610c546106f4926040519283917f9710a9d0000000000000000000000000000000000000000000000000000000006020840152604060248401526064830190610831565b5f6044830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261069f565b610c54611a81916106f4936040519384927f9710a9d0000000000000000000000000000000000000000000000000000000006020850152604060248501526064840190610831565b906044830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261069f565b90611af5604051611ac560408261069f565b600381527f69323400000000000000000000000000000000000000000000000000000000006020820152836118e4565b60038201913560e81d90565b90611b0a6106f6565b917f75313238000000000000000000000000000000000000000000000000000000006020840152803560801c92611b416010612c88565b805160068110611b71575b508291611b61611b6c92610dfd6010966124ec565b90610e0985886125e1565b019190565b9390926040959295517f2000000000000000000000000000000000000000000000000000000000000000602082015260018152611baf60218261069f565b94600603600681116105b057949560015b15611c03575b5f95600180821614611be9575b611be29060011c5b978061249e565b9695611bc0565b94611bdb611bfa611be2928a61249e565b96915050611bd3565b85611bc657929550909350916010611b4c565b611c1e6107b3565b907f5b52657761726473557064617465725d20656e746572696e67205f726577617260208301527f6441626f766500000000000000000000000000000000000000000000000000006040830152565b611c7561074a565b907f5b52657761726473557064617465725d20496e697469616c697a65642c20757060208301527f646174696e67207469636b0000000000000000000000000000000000000000006040830152565b60405190611cd360608361069f565b602582527f636b2025730000000000000000000000000000000000000000000000000000006040837f5b52657761726473557064617465725d20416464696e6720257320746f20746960208201520152565b60405190611d3460408361069f565b601e82527f5b52657761726473557064617465725d204e657720746f74616c3a20257300006020830152565b60405190611d6f60608361069f565b603a82527f2025732067726f777468206f75747369646520627920256531380000000000006040837f5b52657761726473557064617465725d20496e6372656173696e67207469636b60208201520152565b611dc9610789565b907f5b52657761726473557064617465725d2052657472696576656420616e64207560208301527f706461746564206c697175696469747920746f3a2025730000000000000000006040830152565b611e2061074a565b907f5b52657761726473557064617465725d204d61696e20726577617264206c6f6f60208301527f7020636f6d706c6574652e0000000000000000000000000000000000000000006040830152565b611e7761079e565b907f5b52657761726473557064617465725d2052656164696e67206164646974696f60208301527f6e616c20616d6f756e7420666f722063757272656e74207469636b00000000006040830152565b611ece6107b3565b907f5b52657761726473557064617465725d2063757272656e745469636b5265776160208301527f72643a20257300000000000000000000000000000000000000000000000000006040830152565b60405190611f2c60608361069f565b603e82527f6f74616c3a2025732c2063756d756c617469766547726f7774683a20732900006040837f5b52657761726473557064617465725d2046696e616c2076616c75657320287460208201520152565b929394959095611f8f61053e611c16565b60015f985f9660015b156120dd575b5f92611fb6575b611faf9089612919565b9092611f98565b611fc561053e9b94989b611c6d565b5f938686036120b1575b84611fd99161112e565b9a6fffffffffffffffffffffffffffffffff8916611ff68661110a565b046120009161112e565b9761201682899060020b5f5260205260405f2090565b898154906120239161112e565b905561202f828b6127a1565b612038916127d1565b938160020b9061204782612d2b565b61204f611cc4565b91612059926127ea565b8b612062611d25565b9061206c91611a39565b61207590612d2b565b8861207e611d60565b916120889261286b565b612090611dc1565b6fffffffffffffffffffffffffffffffff85166120ac91611a39565b611fa5565b956fffffffffffffffffffffffffffffffff94506120d1611fd991611b01565b90979516949050611fcf565b8060020b8a60020b12611f9e57509597505094509091506120ff61053e611e18565b818103612129575b6121239061211d8688612118611f1d565b612a4a565b82612aca565b93929190565b936121916121239161216d6121556fffffffffffffffffffffffffffffffff999561163a61053e611e6f565b99909916809995612168826115ea611ec6565b61112e565b9761218a6fffffffffffffffffffffffffffffffff88169161110a565b049061112e565b949050612107565b6121a16107b3565b907f5b52657761726473557064617465725d20656e746572696e67205f726577617260208301527f6442656c6f7700000000000000000000000000000000000000000000000000006040830152565b604051906121ff60408361069f565b601a82527f5b52657761726473557064617465725d20746f74616c3a2025730000000000006020830152565b6040519061223a60808361069f565b604e82527f6c69717569646974793a202573290000000000000000000000000000000000006060837f5b52657761726473557064617465725d2072657761726420757064617465206c60208201527f6f6f702028696e697469616c697a65643a2025732c207469636b3a2025732c2060408201520152565b93949196929095966122c561053e612199565b6001935f905f936122dc6122d76121f0565b6119c0565b60015b1561247a575b8a5f9761231881151590650566616c7365604051928060251884016040525f845265047472756500821802186005830152565b908360020b9061234e61232a83612d2b565b61233261222b565b906fffffffffffffffffffffffffffffffff8d16958692612af9565b612367575b5050506123609089610a4c565b90966122df565b919796909461237761053e611c6d565b5f98870361244d575b8861238a9161112e565b946123948961110a565b0461239e9161112e565b956123b4838b9060020b5f5260205260405f2090565b878154906123c19161112e565b90556123cd838c6127a1565b6123d691612bda565b966123e082612d2b565b6123e8611cc4565b916123f2926127ea565b836123fb611d25565b9061240591611a39565b61240e90612d2b565b85612417611d60565b916124219261286b565b612429611dc1565b6fffffffffffffffffffffffffffffffff871661244591611a39565b8a5f80612353565b956fffffffffffffffffffffffffffffffff985061246d61238a91611b01565b9990991698969050612380565b8960020b8160020b13156122e55750955097929550925094506120ff61053e611e18565b6106f4906124c06124ba9493604051958693602085019061081f565b9061081f565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810184528361069f565b90604051916040830190606084016040525f82526f30313233343536373839616263646566600f52603a8401905b600f8116517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8401937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0153600f8160041c1651835360081c81830361251a5790506125d457806130787fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe060429301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffde81019303018252565b632194895a5f526004601cfd5b9190917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe060428460011b011660405101908193602083016040525f83526f30313233343536373839616263646566600f5280018203905b600f8116517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8401937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0153600f8160041c1651835360081c8183036126385790506125d457806130787fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe060029301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffde81019303018252565b610c5490610c286106f494612771612741956040519687957f2ced7cef000000000000000000000000000000000000000000000000000000006020880152606060248801526084870190610831565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc868303016044870152610831565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc848303016064850152610831565b906127cc917f0000000000000000000000000000000000000000000000000000000000000000610f44565b905090565b03908160801c6127dd57565b63c9654ed45f526004601cfd5b610c5490610c28612836936106f4956040519586947fa3f5c739000000000000000000000000000000000000000000000000000000006020870152606060248701526084860190610831565b9160448501527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc848303016064850152610831565b610c54906106f4936128e76128b7946040519586947ff362ca59000000000000000000000000000000000000000000000000000000006020870152606060248701526084860190610831565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc858303016044860152610831565b906064830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261069f565b919060020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213176105b05761299660ff610a7e83603c5f81610b4d970712910503908160020b60081d60010b9160ff1690565b9181031690811b7f07060605060205040602030205040301060502050303040105050304000000006f8421084210842108cc6318c6db6d54be826fffffffffffffffffffffffffffffffff1060071b831560081b1783811c67ffffffffffffffff1060061b1783811c63ffffffff1060051b1783811c61ffff1060041b1783811c60ff1060031b1792831c1c601f161a1761010081141591825f14612a415760ff9103169093611016565b50505f90610b47565b610c5490612a93926106f4946040519485937f969cdd03000000000000000000000000000000000000000000000000000000006020860152606060248601526084850190610831565b9160448401526064830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261069f565b03612ad157565b7f01842f8c000000000000000000000000000000000000000000000000000000005f5260045ffd5b6106f493612ba8612b4894612b78610c54956040519788967f9fd009f50000000000000000000000000000000000000000000000000000000060208901526080602489015260a4880190610831565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc878303016044880152610831565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc858303016064860152610831565b906084830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261069f565b01908160801c6127dd57565b9060036024612bff6020935f52600660205260405f2090565b73ffffffffffffffffffffffffffffffffffffffff60405195869485937f1e2eaeaf000000000000000000000000000000000000000000000000000000008552016004840152165afa8015611011576fffffffffffffffffffffffffffffffff915f91612c6b57501690565b612c84915060203d60201161100a57610ffb818361069f565b1690565b90604051600a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608083019460a084016040525f8652945b0193818106603001855304928315612cfb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600a91612cc0565b92506080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09203019201918252565b5f811215612d72576001612d40911901612c88565b9060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff835193602d81520192018252565b610b4d90612c8856fea164736f6c634300081a000a
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0\x80`@R4a\x01UW` \x81a/\x05\x808\x03\x80\x91a\0\x1F\x82\x85a\x01YV[\x839\x81\x01\x03\x12a\x01UWQ`\x01`\x01`\xA0\x1B\x03\x81\x16\x90\x81\x90\x03a\x01UW`\x80Ra\t\0\x800\x16\x03a\x01@W`@\x80Q\x90\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17a\x01,W_\x91\x82\x91`@R`\x18\x81R` \x81\x01\x7Frewards manager deployed\0\0\0\0\0\0\0\0\x81Ra\0\xE1`d`@Q\x80\x93` \x82\x01\x95c\x10L\x13\xEB`\xE2\x1B\x87R` `$\x84\x01RQ\x80\x91\x81`D\x85\x01R\x84\x84\x01^\x86\x83\x82\x84\x01\x01R`\x1F\x80\x19\x91\x01\x16\x81\x01\x03\x01`\x1F\x19\x81\x01\x83R\x82a\x01YV[Q\x90jconsole.logZ\xFAP`@Qa-\x88\x90\x81a\x01}\x829`\x80Q\x81\x81\x81`\xFB\x01R\x81\x81a\x03T\x01R\x81\x81a\tZ\x01R\x81\x81a\n\x84\x01R\x81\x81a\x15\xF1\x01Ra'\xA8\x01R\xF3[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[c\x0E\xA7\x06E`\xE3\x1B_Ra\t\0`\x04R`$_\xFD[_\x80\xFD[`\x1F\x90\x91\x01`\x1F\x19\x16\x81\x01\x90`\x01`\x01`@\x1B\x03\x82\x11\x90\x82\x10\x17a\x01,W`@RV\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c%\x99\x82\xE5\x14a\0tW\x80c5\xE8\x1Cp\x14a\0oW\x80cb\x88\x9D\xD6\x14a\0jW\x80ck\xC83O\x14a\0eW\x80c\x8D\xB2\xB6R\x14a\0`Wc\xD8mtN\x14a\0[W_\x80\xFD[a\x064V[a\x05\xB5V[a\x04QV[a\x03\x98V[a\x02hV[4a\x01\x95Wa\x01`\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x01\x95Wa\0\xACa\x01\x99V[Pa\0\xB66a\x01\xBCV[Pa\0\xC06a\x01\xEBV[Pa\x01D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x95Wa\0\xE2\x906\x90`\x04\x01a\x02\x1AV[PPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x163\x03a\x01mW\x7F%\x99\x82\xE5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x80R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80`\xA0\x01`\x80\xF3[\x7F\xF82\x86\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[_\x80\xFD[`\x045\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x01\x95WV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC`\xA0\x91\x01\x12a\x01\x95W`$\x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF<`\x80\x91\x01\x12a\x01\x95W`\xC4\x90V[\x91\x81`\x1F\x84\x01\x12\x15a\x01\x95W\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x95W` \x83\x81\x86\x01\x95\x01\x01\x11a\x01\x95WV[`$5\x90\x81`\x02\x0B\x82\x03a\x01\x95WV[`D5\x90\x81`\x02\x0B\x82\x03a\x01\x95WV[4a\x01\x95W`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x01\x95W`\x045a\x02\xA2a\x02HV[a\x02\xDAa\x02\xADa\x06\xF6V[\x7Ftick\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x82\x84a\x08\xBDV[_\x80`\x01[\x15a\x02\xF8W[PP_a\x02\xF2\x82\x84a\nLV[\x91a\x02\xDFV[a\x03\x02W\x80a\x02\xE5V[a\x03\x84\x91a\x03\x94\x93a\x03Ba\x03\x15a\x07\x0BV[\x7FnextTickUp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x84\x83a\x08\xBDV[\x80_R`\x01` Ra\x03x`@_ \x91\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x10gV[`\xA0\x1C`\x02\x0B\x90a\x0BgV[`@Q\x90\x81R\x90\x81\x90` \x82\x01\x90V[\x03\x90\xF3[4a\x01\x95W``\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x01\x95Wa\x03\x94a\x03\x84`\x045a\x03\xD8a\x02HV[a\x03\xE0a\x02XV[\x91a\x04\x19a\x03\xECa\x07 V[\x7FlowerTick\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x83\x83a\x08\xBDV[a\x03Ba\x04$a\x07 V[\x7FupperTick\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x84\x83a\x08\xBDV[4a\x01\x95W` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x01\x95W`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x95Wa\x04\xA0\x906\x90`\x04\x01a\x02\x1AV[a\x04\xFCa\x04\xABa\x075V[\x7F[MockRewardsManager] loading ass` \x82\x01R\x7Fets\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\x0B\xE2V[a\x05\x05\x82a\x17\xD3V[\x90\x80\x82\x03\x82\x81\x11a\x05\xB0W`D\x90\x04` \x1B\x17\x90\x81` \x1C_\x90_\x91[\x81\x83\x10a\x05QWa\x05O\x86\x88a\x05H\x88\x88a\x05Ca\x05>a\x07\xC8V[a\x0B\xE2V[a\x0C\xBAV[PPa\x0F\x14V[\0[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x05p\x84\x87a\x11;V[5``\x1C\x91\x16\x81\x11\x15a\x05\x88W`\x01\x90\x92\x01\x91a\x05\"V[\x7F\x80\xF1\x1A\xCF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[a\t\xE8V[4a\x01\x95Wa\x01\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x01\x95Wa\x05\xEDa\x01\x99V[Pa\x05\xF76a\x01\xBCV[Pa\x06\x016a\x01\xEBV[Pa\x01d5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x95Wa\x06#\x906\x90`\x04\x01a\x02\x1AV[PP`@\x80Q_\x81R_` \x82\x01R\xF3[4a\x01\x95W_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x01\x95W`@\x80Q`<\x81R_` \x82\x01R\xF3[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\xE0W`@RV[a\x06rV[`@Q\x90a\x06\xF4`\xA0\x83a\x06\x9FV[V[`@Q\x90a\x07\x05`@\x83a\x06\x9FV[`\x04\x82RV[`@Q\x90a\x07\x1A`@\x83a\x06\x9FV[`\n\x82RV[`@Q\x90a\x07/`@\x83a\x06\x9FV[`\t\x82RV[`@Q\x90a\x07D``\x83a\x06\x9FV[`#\x82RV[`@Q\x90a\x07Y``\x83a\x06\x9FV[`+\x82RV[`@Q\x90a\x07n``\x83a\x06\x9FV[`*\x82RV[`@Q\x90a\x07\x83``\x83a\x06\x9FV[`0\x82RV[`@Q\x90a\x07\x98``\x83a\x06\x9FV[`7\x82RV[`@Q\x90a\x07\xAD``\x83a\x06\x9FV[`;\x82RV[`@Q\x90a\x07\xC2``\x83a\x06\x9FV[`&\x82RV[a\x07\xD0a\x075V[\x90\x7F[MockRewardsManager] rewarding p` \x83\x01R\x7Fool\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[\x80Q\x91\x90\x82\x90` \x01\x82^\x01_\x81R\x90V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x80\x94\x80Q\x91\x82\x91\x82\x87R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V[\x15a\x08|WPV[a\x08\xB9\x90`@Q\x91\x82\x91\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R` `\x04\x84\x01\x81\x81R\x01\x90a\x081V[\x03\x90\xFD[a\x06\xF4\x92a\t\xE0`\x10a\t~a\t\x90\x95o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x95a\tX`@Qa\tH`\x19\x82a\x08\xF8` \x82\x01\x8Ca\x08\x1FV[\x7F not from regular spacing\0\0\0\0\0\0\0\x81R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF9\x81\x01\x84R\x01\x82a\x06\x9FV[`<\x84`\x02\x0B\x07`\x02\x0B\x15a\x08tV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x0FDV[P\x92`@Q\x95\x86\x91` \x83\x01\x90a\x08\x1FV[\x7F not initialized\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF0\x81\x01\x86R\x01\x84a\x06\x9FV[\x16\x15\x15a\x08tV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[`\x02\x0B`\x01\x01\x90b\x7F\xFF\xFF\x82\x13\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\x83\x12\x17a\x05\xB0WV[\x91\x90a\n\xA8`\xFFa\n~a\nla\x0BM\x94`<_\x81\x83\x07\x12\x91\x05\x03a\n\x15V[\x90\x81`\x02\x0B`\x08\x1D`\x01\x0B\x91`\xFF\x16\x90V[\x92\x90\x80\x96\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x17^V[\x91\x16\x90\x81\x1C`\x01\x81\x19\x01\x16~\x1F\r\x1E\x10\x0C\x1D\x07\x0F\t\x0B\x19\x13\x1C\x17\x06\x01\x0E\x11\x08\n\x1A\x14\x18\x02\x12\x1B\x15\x03\x16\x04\x05`\x1Fa\x01\xE0\x7F\x80@@UC\0RfD2\0\0P a\x06t\x050&\x02\0\0\x10u\x06 \x01v\x11pw`\xFC\x7F\xB6\xDBm\xB6\xDD\xDD\xDD\xDD\xD3M4\xD3I$\x92I!\x08B\x10\x8Cc\x18\xC69\xCEs\x9C\xFF\xFF\xFF\xFF\x86\x02`\xF8\x1C\x16\x1B`\xF7\x1C\x16\x92\x83\x1Cc\xD7dS\xE0\x04\x16\x1A\x17a\x01\0\x81\x14\x15\x91\x82_\x14a\x0BPW\x01`\xFF\x16\x90[\x93a\x10\x16V[\x90V[PP`\xFF\x90a\x0BGV[\x91\x90\x82\x03\x91\x82\x11a\x05\xB0WV[\x90\x91a\x0B~\x81\x83\x90`\x02\x0B_R` R`@_ \x90V[T\x93a\x0B\x95\x81\x84\x90`\x02\x0B_R` R`@_ \x90V[T\x93`\x02\x0B\x91`\x02\x0B\x82\x12_\x14a\x0B\xB2WPPPa\x0BM\x91a\x0BZV[`\x02\x0B\x13a\x0B\xC8WP\x90\x81\x03\x90\x81\x11a\x05\xB0W\x90V[`\x01\x01T\x91\x82\x03\x91\x82\x11a\x05\xB0W\x81\x03\x90\x81\x11a\x05\xB0W\x90V[a\x0C(a\x0CTa\x06\xF4\x92`@Q\x92\x83\x91\x7FA0O\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R` `$\x84\x01\x81\x81R\x01\x90a\x081V[\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x06\x9FV[a\x10\xF0V[`@Q\x90a\x0Ch``\x83a\x06\x9FV[`8\x82R\x7Fassets, building pool id\0\0\0\0\0\0\0\0`@\x83\x7F[PoolRewardsManager] retrieving ` \x82\x01R\x01RV[\x90\x91a\r\"`@Qa\x0C\xCD``\x82a\x06\x9FV[`)\x81R\x7F[PoolRewardsManager] entering _r` \x82\x01R\x7FewardPool\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\x0B\xE2V[a\r~a\r-a\x07JV[\x7F[PoolRewardsManager] decoding as` \x82\x01R\x7Fset indices\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\x0B\xE2V[`@Q\x92a\r\x8D`@\x85a\x06\x9FV[`\x12\x84R\x7Fu32:AssetIndexPair\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x85\x01R\x825`\xE0\x1C\x92a\r\xC7`\x04a,\x88V[\x80Q`\x06\x81\x10a\x0ElW[Pa\x0EBa\x0E0`\x04\x84a\x0E\x0F\x89a\x0Eg\x99\x9A\x9Ba\x0E\t\x85a\x0E\x03a\x0EI\x9Aa\r\xFDa\x0EP\x9Da$\xECV[\x90a\x18%V[\x93a%\xE1V[\x91a&\xF2V[\x01\x94a\x0E\x1Ca\x05>a\x0CYV[a\x0E7a\x0E0a\xFF\xFF\x8B`\x10\x1C\x16\x83a\x11;V[5``\x1C\x90V[\x98a\xFF\xFF\x16\x90a\x11;V[\x860a\x12\x04V[`\xA0\x90 \x90V[a\x0Eb\x81_R`\x01` R`@_ \x90V[a\x15\xB9V[\x90\x92\x91V[\x94\x92\x90\x93\x91`@Q\x7F \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`\x01\x81Ra\x0E\xA9`!\x82a\x06\x9FV[\x95`\x06\x03`\x06\x81\x11a\x05\xB0W\x95\x96`\x01[\x15a\x0E\xFDW[_\x96`\x01\x80\x82\x16\x14a\x0E\xE3W[a\x0E\xDC\x90`\x01\x1C[\x98\x80a$\x9EV[\x97\x96a\x0E\xBAV[\x95a\x0E\xD5a\x0E\xF4a\x0E\xDC\x92\x8Ba$\x9EV[\x97\x91PPa\x0E\xCDV[\x86a\x0E\xC0W\x96P\x92\x94P\x90\x92\x90\x91\x90a\x0EBa\r\xD2V[\x91\x01\x03a\x0F\x1DWV[c\x01\x84/\x8C_R`\x04`\x1C\xFD[\x90\x81` \x91\x03\x12a\x01\x95WQ\x90V[`@Q=_\x82>=\x90\xFD[a\x0F\xB2\x90`\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x95\x94` \x94_R`\x06\x85R`@_ \x90_R\x01\x83R`@_ `@Q\x95\x86\x80\x94\x81\x93\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`\x04\x83\x01\x91\x90` \x83\x01\x92RV[\x03\x92\x16Z\xFA\x91\x82\x15a\x10\x11W_\x92a\x0F\xE0W[Po\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x91`\x80\x1D\x90V[a\x10\x03\x91\x92P` =` \x11a\x10\nW[a\x0F\xFB\x81\x83a\x06\x9FV[\x81\x01\x90a\x0F*V[\x90_a\x0F\xC5V[P=a\x0F\xF1V[a\x0F9V[`\x08\x1B`\x02\x0B\x90`\xFF\x16`\x02\x0B\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\x81\x12b\x7F\xFF\xFF\x82\x13\x17a\x05\xB0W`<\x90`\x02\x0B\x02\x80`\x02\x0B\x90\x81\x03a\x05\xB0W\x90V[` \x90`$a\x10\x93s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x94_R`\x06` R`@_ \x90V[`@Q\x94\x85\x93\x84\x92\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R`\x04\x84\x01R\x16Z\xFA\x90\x81\x15a\x10\x11W_\x91a\x10\xD7WP\x90V[a\x0BM\x91P` =` \x11a\x10\nWa\x0F\xFB\x81\x83a\x06\x9FV[_\x80\x91` \x81Q\x91\x01jconsole.logZ\xFAPV[\x90g\r\xE0\xB6\xB3\xA7d\0\0\x82\x02\x91\x80\x83\x04g\r\xE0\xB6\xB3\xA7d\0\0\x14\x90\x15\x17\x15a\x05\xB0WV[\x91\x90\x82\x01\x80\x92\x11a\x05\xB0WV[a\x11\xA2\x82`@Qa\x11M``\x82a\x06\x9FV[`3\x81R\x7F[Asset] Attempting to retrieve a` \x82\x01R\x7Fsset[%s] from array\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\x1A9V[\x80` \x1C\x80\x83\x10\x15a\x11\xD5WP`D\x82\x02\x91\x80\x83\x04`D\x14\x90\x15\x17\x15a\x05\xB0Wc\xFF\xFF\xFF\xFF\x16\x90\x81\x01\x80\x91\x11a\x05\xB0W\x90V[\x82\x7F\xBC_\x99|\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04R`$R`D_\xFD[\x90\x91`@Q\x91`\xA0\x83\x01\x92\x80\x84\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x11\x17a\x06\xE0Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x93_`\x80a\x12\xA6\x94a\x0BM\x98`@R\x82\x81R\x82` \x82\x01R\x82`@\x82\x01R\x82``\x82\x01R\x01R\x16a\x12\x89\x84a\x12ka\x06\xE5V[\x97\x16\x87\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90RV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16` \x86\x01RV[_`@\x85\x01R`<``\x85\x01R\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x83\x01RV[a\x12\xD9a\x07_V[\x90\x7F[RewardsUpdater] Entering _decod` \x83\x01R\x7FeAndReward\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[a\x130a\x075V[\x90\x7F[RewardsUpdater] Decoding startT` \x83\x01R\x7Fick\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[a\x13\x87a\x07tV[\x90\x7F[RewardsUpdater] Retrieving pool` \x83\x01R\x7F %x current tick\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[a\x13\xDEa\x07tV[\x90\x7F[RewardsUpdater] Decoding update` \x83\x01R\x7F start liquidity\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[a\x145a\x07\x89V[\x90\x7F[RewardsUpdater] Decoding bounds` \x83\x01R\x7F of reward amounts list\0\0\0\0\0\0\0\0\0`@\x83\x01RV[a\x14\x8Ca\x07_V[\x90\x7F[RewardsUpdater] Starting core r` \x83\x01R\x7Feward loop\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[`@Q\x90a\x14\xEA`\x80\x83a\x06\x9FV[`C\x82R\x7Fity\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0``\x83\x7F[RewardsUpdater] Completed core ` \x82\x01R\x7Freward loop, checking end liquid`@\x82\x01R\x01RV[a\x15ja\x07\x9EV[\x90\x7F[RewardsUpdater] Updating global` \x83\x01R\x7F growth by cumulativeGrowth\0\0\0\0\0`@\x83\x01RV[a\x15\xDCa\x16\x90\x94\x93a\x15\xCCa\x05>a\x12\xD1V[a\x15\xD7a\x05>a\x13(V[a\x1A\xB3V[\x91\x90a\x15\xEF\x84a\x15\xEAa\x13\x7FV[a\x1A9V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x92a\x16Q\x85a\x16?a\x16.a\x16%\x83\x89a\x10gV[`\xA0\x1C`\x02\x0B\x90V[\x94a\x16:a\x05>a\x13\xD6V[a\x1B\x01V[\x92\x90a\x16La\x05>a\x14-V[a\x17\xD3V[\x93\x90a\x16^a\x05>a\x14\x84V[`\x02\x86\x81\x0B\x90\x83\x90\x0B\x13a\x17!Wa\x16v\x95\x87a\"\xB2V[\x91\x97\x92\x95\x90\x94\x91\x92\x91[a\x16\x8Ba\x05>a\x14\xDBV[a+\xE6V[\x90o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x03a\x16\xDEWPP`\x01a\x16\xD8\x91a\x16\xCFa\x05>a\x15bV[\x01\x91\x82Ta\x11.V[\x90U\x91\x90V[\x7Fd)\xCF\xD2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_Ro\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16`\x04R\x16`$R`D_\xFD[\x90a\x173\x94\x93\x92\x91a\x17P\x96\x88a\x1F~V[\x92\x93\x91\x92\x90\x91o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x90V[\x91\x97\x92\x95\x90\x94\x91\x92\x91a\x16\x80V[`\x05s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93` \x93_R`\x06\x84R`@_ \x90_R\x01\x82R`$`@_ `@Q\x94\x85\x93\x84\x92\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R`\x04\x84\x01R\x16Z\xFA\x90\x81\x15a\x10\x11W_\x91a\x10\xD7WP\x90V[\x90a\x18\x15`@Qa\x17\xE5`@\x82a\x06\x9FV[`\x0F\x81R\x7Fu24/List.length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x83a\x18\xE4V[`\x03\x80\x83\x01\x92\x805`\xE8\x1C\x01\x01\x90V[`\x0Ca\x06\xF4\x91a\x18\x94a\x18j\x95\x94\x83`@Q\x97\x88\x94\x7F[CALLDATAREADER] reading next \0\0` \x87\x01R`>\x86\x01\x90a\x08\x1FV[\x7F byte(s) at \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x01\x90a\x08\x1FV[\x7F as %s -> %s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xEC\x81\x01\x85R\x01\x83a\x06\x9FV[\x91\x90\x91a\x18\xF1`\x03a,\x88V[\x80Q`\x06\x81\x10a\x19\x1EW[P\x92a\x0E\t`\x03a\x19\x14a\x06\xF4\x95\x96a\r\xFD\x86a$\xECV[\x935`\xE8\x1Ca%\xE1V[\x92\x90\x91`@Q\x7F \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`\x01\x81Ra\x19Y`!\x82a\x06\x9FV[\x93`\x06\x03`\x06\x81\x11a\x05\xB0W\x93\x94`\x01[\x15a\x19\xADW[_\x94`\x01\x80\x82\x16\x14a\x19\x93W[a\x19\x8C\x90`\x01\x1C[\x96\x80a$\x9EV[\x95\x94a\x19jV[\x93a\x19\x85a\x19\xA4a\x19\x8C\x92\x89a$\x9EV[\x95\x91PPa\x19}V[\x84a\x19pW\x94P\x90\x92P\x90a\x0E\ta\x18\xFCV[a\x1A\x07a\x0CTa\x06\xF4\x92`@Q\x92\x83\x91\x7F\x97\x10\xA9\xD0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R`@`$\x84\x01R`d\x83\x01\x90a\x081V[_`D\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x06\x9FV[a\x0CTa\x1A\x81\x91a\x06\xF4\x93`@Q\x93\x84\x92\x7F\x97\x10\xA9\xD0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x85\x01R`@`$\x85\x01R`d\x84\x01\x90a\x081V[\x90`D\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x06\x9FV[\x90a\x1A\xF5`@Qa\x1A\xC5`@\x82a\x06\x9FV[`\x03\x81R\x7Fi24\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x83a\x18\xE4V[`\x03\x82\x01\x915`\xE8\x1D\x90V[\x90a\x1B\na\x06\xF6V[\x91\x7Fu128\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R\x805`\x80\x1C\x92a\x1BA`\x10a,\x88V[\x80Q`\x06\x81\x10a\x1BqW[P\x82\x91a\x1Baa\x1Bl\x92a\r\xFD`\x10\x96a$\xECV[\x90a\x0E\t\x85\x88a%\xE1V[\x01\x91\x90V[\x93\x90\x92`@\x95\x92\x95Q\x7F \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`\x01\x81Ra\x1B\xAF`!\x82a\x06\x9FV[\x94`\x06\x03`\x06\x81\x11a\x05\xB0W\x94\x95`\x01[\x15a\x1C\x03W[_\x95`\x01\x80\x82\x16\x14a\x1B\xE9W[a\x1B\xE2\x90`\x01\x1C[\x97\x80a$\x9EV[\x96\x95a\x1B\xC0V[\x94a\x1B\xDBa\x1B\xFAa\x1B\xE2\x92\x8Aa$\x9EV[\x96\x91PPa\x1B\xD3V[\x85a\x1B\xC6W\x92\x95P\x90\x93P\x91`\x10a\x1BLV[a\x1C\x1Ea\x07\xB3V[\x90\x7F[RewardsUpdater] entering _rewar` \x83\x01R\x7FdAbove\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[a\x1Cua\x07JV[\x90\x7F[RewardsUpdater] Initialized, up` \x83\x01R\x7Fdating tick\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[`@Q\x90a\x1C\xD3``\x83a\x06\x9FV[`%\x82R\x7Fck %s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x7F[RewardsUpdater] Adding %s to ti` \x82\x01R\x01RV[`@Q\x90a\x1D4`@\x83a\x06\x9FV[`\x1E\x82R\x7F[RewardsUpdater] New total: %s\0\0` \x83\x01RV[`@Q\x90a\x1Do``\x83a\x06\x9FV[`:\x82R\x7F %s growth outside by %e18\0\0\0\0\0\0`@\x83\x7F[RewardsUpdater] Increasing tick` \x82\x01R\x01RV[a\x1D\xC9a\x07\x89V[\x90\x7F[RewardsUpdater] Retrieved and u` \x83\x01R\x7Fpdated liquidity to: %s\0\0\0\0\0\0\0\0\0`@\x83\x01RV[a\x1E a\x07JV[\x90\x7F[RewardsUpdater] Main reward loo` \x83\x01R\x7Fp complete.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[a\x1Ewa\x07\x9EV[\x90\x7F[RewardsUpdater] Reading additio` \x83\x01R\x7Fnal amount for current tick\0\0\0\0\0`@\x83\x01RV[a\x1E\xCEa\x07\xB3V[\x90\x7F[RewardsUpdater] currentTickRewa` \x83\x01R\x7Frd: %s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[`@Q\x90a\x1F,``\x83a\x06\x9FV[`>\x82R\x7Fotal: %s, cumulativeGrowth: s)\0\0`@\x83\x7F[RewardsUpdater] Final values (t` \x82\x01R\x01RV[\x92\x93\x94\x95\x90\x95a\x1F\x8Fa\x05>a\x1C\x16V[`\x01_\x98_\x96`\x01[\x15a \xDDW[_\x92a\x1F\xB6W[a\x1F\xAF\x90\x89a)\x19V[\x90\x92a\x1F\x98V[a\x1F\xC5a\x05>\x9B\x94\x98\x9Ba\x1CmV[_\x93\x86\x86\x03a \xB1W[\x84a\x1F\xD9\x91a\x11.V[\x9Ao\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16a\x1F\xF6\x86a\x11\nV[\x04a \0\x91a\x11.V[\x97a \x16\x82\x89\x90`\x02\x0B_R` R`@_ \x90V[\x89\x81T\x90a #\x91a\x11.V[\x90Ua /\x82\x8Ba'\xA1V[a 8\x91a'\xD1V[\x93\x81`\x02\x0B\x90a G\x82a-+V[a Oa\x1C\xC4V[\x91a Y\x92a'\xEAV[\x8Ba ba\x1D%V[\x90a l\x91a\x1A9V[a u\x90a-+V[\x88a ~a\x1D`V[\x91a \x88\x92a(kV[a \x90a\x1D\xC1V[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16a \xAC\x91a\x1A9V[a\x1F\xA5V[\x95o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x94Pa \xD1a\x1F\xD9\x91a\x1B\x01V[\x90\x97\x95\x16\x94\x90Pa\x1F\xCFV[\x80`\x02\x0B\x8A`\x02\x0B\x12a\x1F\x9EWP\x95\x97PP\x94P\x90\x91Pa \xFFa\x05>a\x1E\x18V[\x81\x81\x03a!)W[a!#\x90a!\x1D\x86\x88a!\x18a\x1F\x1DV[a*JV[\x82a*\xCAV[\x93\x92\x91\x90V[\x93a!\x91a!#\x91a!ma!Uo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x99\x95a\x16:a\x05>a\x1EoV[\x99\x90\x99\x16\x80\x99\x95a!h\x82a\x15\xEAa\x1E\xC6V[a\x11.V[\x97a!\x8Ao\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x91a\x11\nV[\x04\x90a\x11.V[\x94\x90Pa!\x07V[a!\xA1a\x07\xB3V[\x90\x7F[RewardsUpdater] entering _rewar` \x83\x01R\x7FdBelow\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[`@Q\x90a!\xFF`@\x83a\x06\x9FV[`\x1A\x82R\x7F[RewardsUpdater] total: %s\0\0\0\0\0\0` \x83\x01RV[`@Q\x90a\":`\x80\x83a\x06\x9FV[`N\x82R\x7Fliquidity: %s)\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0``\x83\x7F[RewardsUpdater] reward update l` \x82\x01R\x7Foop (initialized: %s, tick: %s, `@\x82\x01R\x01RV[\x93\x94\x91\x96\x92\x90\x95\x96a\"\xC5a\x05>a!\x99V[`\x01\x93_\x90_\x93a\"\xDCa\"\xD7a!\xF0V[a\x19\xC0V[`\x01[\x15a$zW[\x8A_\x97a#\x18\x81\x15\x15\x90e\x05false`@Q\x92\x80`%\x18\x84\x01`@R_\x84Re\x04true\0\x82\x18\x02\x18`\x05\x83\x01RV[\x90\x83`\x02\x0B\x90a#Na#*\x83a-+V[a#2a\"+V[\x90o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8D\x16\x95\x86\x92a*\xF9V[a#gW[PPPa#`\x90\x89a\nLV[\x90\x96a\"\xDFV[\x91\x97\x96\x90\x94a#wa\x05>a\x1CmV[_\x98\x87\x03a$MW[\x88a#\x8A\x91a\x11.V[\x94a#\x94\x89a\x11\nV[\x04a#\x9E\x91a\x11.V[\x95a#\xB4\x83\x8B\x90`\x02\x0B_R` R`@_ \x90V[\x87\x81T\x90a#\xC1\x91a\x11.V[\x90Ua#\xCD\x83\x8Ca'\xA1V[a#\xD6\x91a+\xDAV[\x96a#\xE0\x82a-+V[a#\xE8a\x1C\xC4V[\x91a#\xF2\x92a'\xEAV[\x83a#\xFBa\x1D%V[\x90a$\x05\x91a\x1A9V[a$\x0E\x90a-+V[\x85a$\x17a\x1D`V[\x91a$!\x92a(kV[a$)a\x1D\xC1V[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16a$E\x91a\x1A9V[\x8A_\x80a#SV[\x95o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x98Pa$ma#\x8A\x91a\x1B\x01V[\x99\x90\x99\x16\x98\x96\x90Pa#\x80V[\x89`\x02\x0B\x81`\x02\x0B\x13\x15a\"\xE5WP\x95P\x97\x92\x95P\x92P\x94Pa \xFFa\x05>a\x1E\x18V[a\x06\xF4\x90a$\xC0a$\xBA\x94\x93`@Q\x95\x86\x93` \x85\x01\x90a\x08\x1FV[\x90a\x08\x1FV[\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x84R\x83a\x06\x9FV[\x90`@Q\x91`@\x83\x01\x90``\x84\x01`@R_\x82Ro0123456789abcdef`\x0FR`:\x84\x01\x90[`\x0F\x81\x16Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\x84\x01\x93\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x01S`\x0F\x81`\x04\x1C\x16Q\x83S`\x08\x1C\x81\x83\x03a%\x1AW\x90Pa%\xD4W\x80a0x\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`B\x93\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDE\x81\x01\x93\x03\x01\x82RV[c!\x94\x89Z_R`\x04`\x1C\xFD[\x91\x90\x91\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`B\x84`\x01\x1B\x01\x16`@Q\x01\x90\x81\x93` \x83\x01`@R_\x83Ro0123456789abcdef`\x0FR\x80\x01\x82\x03\x90[`\x0F\x81\x16Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\x84\x01\x93\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x01S`\x0F\x81`\x04\x1C\x16Q\x83S`\x08\x1C\x81\x83\x03a&8W\x90Pa%\xD4W\x80a0x\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x02\x93\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDE\x81\x01\x93\x03\x01\x82RV[a\x0CT\x90a\x0C(a\x06\xF4\x94a'qa'A\x95`@Q\x96\x87\x95\x7F,\xED|\xEF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x88\x01R```$\x88\x01R`\x84\x87\x01\x90a\x081V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC\x86\x83\x03\x01`D\x87\x01Ra\x081V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC\x84\x83\x03\x01`d\x85\x01Ra\x081V[\x90a'\xCC\x91\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x0FDV[\x90P\x90V[\x03\x90\x81`\x80\x1Ca'\xDDWV[c\xC9eN\xD4_R`\x04`\x1C\xFD[a\x0CT\x90a\x0C(a(6\x93a\x06\xF4\x95`@Q\x95\x86\x94\x7F\xA3\xF5\xC79\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x87\x01R```$\x87\x01R`\x84\x86\x01\x90a\x081V[\x91`D\x85\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC\x84\x83\x03\x01`d\x85\x01Ra\x081V[a\x0CT\x90a\x06\xF4\x93a(\xE7a(\xB7\x94`@Q\x95\x86\x94\x7F\xF3b\xCAY\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x87\x01R```$\x87\x01R`\x84\x86\x01\x90a\x081V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC\x85\x83\x03\x01`D\x86\x01Ra\x081V[\x90`d\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x06\x9FV[\x91\x90`\x02\x0B\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\x81\x12b\x7F\xFF\xFF\x82\x13\x17a\x05\xB0Wa)\x96`\xFFa\n~\x83`<_\x81a\x0BM\x97\x07\x12\x91\x05\x03\x90\x81`\x02\x0B`\x08\x1D`\x01\x0B\x91`\xFF\x16\x90V[\x91\x81\x03\x16\x90\x81\x1B\x7F\x07\x06\x06\x05\x06\x02\x05\x04\x06\x02\x03\x02\x05\x04\x03\x01\x06\x05\x02\x05\x03\x03\x04\x01\x05\x05\x03\x04\0\0\0\0o\x84!\x08B\x10\x84!\x08\xCCc\x18\xC6\xDBmT\xBE\x82o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x10`\x07\x1B\x83\x15`\x08\x1B\x17\x83\x81\x1Cg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x10`\x06\x1B\x17\x83\x81\x1Cc\xFF\xFF\xFF\xFF\x10`\x05\x1B\x17\x83\x81\x1Ca\xFF\xFF\x10`\x04\x1B\x17\x83\x81\x1C`\xFF\x10`\x03\x1B\x17\x92\x83\x1C\x1C`\x1F\x16\x1A\x17a\x01\0\x81\x14\x15\x91\x82_\x14a*AW`\xFF\x91\x03\x16\x90\x93a\x10\x16V[PP_\x90a\x0BGV[a\x0CT\x90a*\x93\x92a\x06\xF4\x94`@Q\x94\x85\x93\x7F\x96\x9C\xDD\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x86\x01R```$\x86\x01R`\x84\x85\x01\x90a\x081V[\x91`D\x84\x01R`d\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x06\x9FV[\x03a*\xD1WV[\x7F\x01\x84/\x8C\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[a\x06\xF4\x93a+\xA8a+H\x94a+xa\x0CT\x95`@Q\x97\x88\x96\x7F\x9F\xD0\t\xF5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x89\x01R`\x80`$\x89\x01R`\xA4\x88\x01\x90a\x081V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC\x87\x83\x03\x01`D\x88\x01Ra\x081V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC\x85\x83\x03\x01`d\x86\x01Ra\x081V[\x90`\x84\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x06\x9FV[\x01\x90\x81`\x80\x1Ca'\xDDWV[\x90`\x03`$a+\xFF` \x93_R`\x06` R`@_ \x90V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x95\x86\x94\x85\x93\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R\x01`\x04\x84\x01R\x16Z\xFA\x80\x15a\x10\x11Wo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91_\x91a,kWP\x16\x90V[a,\x84\x91P` =` \x11a\x10\nWa\x0F\xFB\x81\x83a\x06\x9FV[\x16\x90V[\x90`@Q`\n\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x80\x83\x01\x94`\xA0\x84\x01`@R_\x86R\x94[\x01\x93\x81\x81\x06`0\x01\x85S\x04\x92\x83\x15a,\xFBW\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\n\x91a,\xC0V[\x92P`\x80\x83\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x92\x03\x01\x92\x01\x91\x82RV[_\x81\x12\x15a-rW`\x01a-@\x91\x19\x01a,\x88V[\x90`\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83Q\x93`-\x81R\x01\x92\x01\x82RV[a\x0BM\x90a,\x88V\xFE\xA1dsolcC\0\x08\x1A\0\n",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610011575f80fd5b5f3560e01c8063259982e51461007457806335e81c701461006f57806362889dd61461006a5780636bc8334f146100655780638db2b652146100605763d86d744e1461005b575f80fd5b610634565b6105b5565b610451565b610398565b610268565b34610195576101607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610195576100ac610199565b506100b6366101bc565b506100c0366101eb565b506101443567ffffffffffffffff8111610195576100e290369060040161021a565b505073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016330361016d577f259982e5000000000000000000000000000000000000000000000000000000006080527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8060a0016080f35b7ff8328614000000000000000000000000000000000000000000000000000000005f5260045ffd5b5f80fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361019557565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc60a091011261019557602490565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3c60809101126101955760c490565b9181601f840112156101955782359167ffffffffffffffff8311610195576020838186019501011161019557565b602435908160020b820361019557565b604435908160020b820361019557565b346101955760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610195576004356102a2610248565b6102da6102ad6106f6565b7f7469636b00000000000000000000000000000000000000000000000000000000602082015282846108bd565b5f8060015b156102f8575b50505f6102f28284610a4c565b916102df565b61030257806102e5565b610384916103949361034261031561070b565b7f6e6578745469636b557000000000000000000000000000000000000000000000602082015284836108bd565b805f52600160205261037860405f20917f0000000000000000000000000000000000000000000000000000000000000000611067565b60a01c60020b90610b67565b6040519081529081906020820190565b0390f35b346101955760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610195576103946103846004356103d8610248565b6103e0610258565b916104196103ec610720565b7f6c6f7765725469636b0000000000000000000000000000000000000000000000602082015283836108bd565b610342610424610720565b7f75707065725469636b0000000000000000000000000000000000000000000000602082015284836108bd565b346101955760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101955760043567ffffffffffffffff8111610195576104a090369060040161021a565b6104fc6104ab610735565b7f5b4d6f636b526577617264734d616e616765725d206c6f6164696e672061737360208201527f65747300000000000000000000000000000000000000000000000000000000006040820152610be2565b610505826117d3565b908082038281116105b0576044900460201b17908160201c5f905f915b8183106105515761054f8688610548888861054361053e6107c8565b610be2565b610cba565b5050610f14565b005b73ffffffffffffffffffffffffffffffffffffffff610570848761113b565b3560601c911681111561058857600190920191610522565b7f80f11acf000000000000000000000000000000000000000000000000000000005f5260045ffd5b6109e8565b34610195576101807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610195576105ed610199565b506105f7366101bc565b50610601366101eb565b506101643567ffffffffffffffff81116101955761062390369060040161021a565b5050604080515f81525f6020820152f35b34610195575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101955760408051603c81525f6020820152f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176106e057604052565b610672565b604051906106f460a08361069f565b565b6040519061070560408361069f565b60048252565b6040519061071a60408361069f565b600a8252565b6040519061072f60408361069f565b60098252565b6040519061074460608361069f565b60238252565b6040519061075960608361069f565b602b8252565b6040519061076e60608361069f565b602a8252565b6040519061078360608361069f565b60308252565b6040519061079860608361069f565b60378252565b604051906107ad60608361069f565b603b8252565b604051906107c260608361069f565b60268252565b6107d0610735565b907f5b4d6f636b526577617264734d616e616765725d20726577617264696e67207060208301527f6f6f6c00000000000000000000000000000000000000000000000000000000006040830152565b805191908290602001825e015f815290565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b1561087c5750565b6108b9906040519182917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484018181520190610831565b0390fd5b6106f4926109e0601061097e610990956fffffffffffffffffffffffffffffffff956109586040516109486019826108f8602082018c61081f565b7f206e6f742066726f6d20726567756c61722073706163696e67000000000000008152037ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff981018452018261069f565b603c8460020b0760020b15610874565b7f0000000000000000000000000000000000000000000000000000000000000000610f44565b5092604051958691602083019061081f565b7f206e6f7420696e697469616c697a6564000000000000000000000000000000008152037ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff081018652018461069f565b161515610874565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b60020b60010190627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008312176105b057565b9190610aa860ff610a7e610a6c610b4d94603c5f81830712910503610a15565b908160020b60081d60010b9160ff1690565b929080967f000000000000000000000000000000000000000000000000000000000000000061175e565b911690811c6001811901167e1f0d1e100c1d070f090b19131c1706010e11080a1a141802121b1503160405601f6101e07f804040554300526644320000502061067405302602000010750620017611707760fc7fb6db6db6ddddddddd34d34d349249249210842108c6318c639ce739cffffffff860260f81c161b60f71c1692831c63d76453e004161a1761010081141591825f14610b50570160ff16905b93611016565b90565b505060ff90610b47565b919082039182116105b057565b9091610b7e81839060020b5f5260205260405f2090565b5493610b9581849060020b5f5260205260405f2090565b549360020b9160020b82125f14610bb257505050610b4d91610b5a565b60020b13610bc857509081039081116105b05790565b600101549182039182116105b05781039081116105b05790565b610c28610c546106f4926040519283917f41304fac0000000000000000000000000000000000000000000000000000000060208401526020602484018181520190610831565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261069f565b6110f0565b60405190610c6860608361069f565b603882527f6173736574732c206275696c64696e6720706f6f6c20696400000000000000006040837f5b506f6f6c526577617264734d616e616765725d2072657472696576696e672060208201520152565b9091610d22604051610ccd60608261069f565b602981527f5b506f6f6c526577617264734d616e616765725d20656e746572696e67205f7260208201527f6577617264506f6f6c00000000000000000000000000000000000000000000006040820152610be2565b610d7e610d2d61074a565b7f5b506f6f6c526577617264734d616e616765725d206465636f64696e6720617360208201527f73657420696e64696365730000000000000000000000000000000000000000006040820152610be2565b60405192610d8d60408561069f565b601284527f7533323a4173736574496e6465785061697200000000000000000000000000006020850152823560e01c92610dc76004612c88565b805160068110610e6c575b50610e42610e30600484610e0f89610e67999a9b610e0985610e03610e499a610dfd610e509d6124ec565b90611825565b936125e1565b916126f2565b0194610e1c61053e610c59565b610e37610e3061ffff8b60101c168361113b565b3560601c90565b9861ffff169061113b565b8630611204565b60a0902090565b610e62815f52600160205260405f2090565b6115b9565b909291565b94929093916040517f2000000000000000000000000000000000000000000000000000000000000000602082015260018152610ea960218261069f565b95600603600681116105b057959660015b15610efd575b5f96600180821614610ee3575b610edc9060011c5b988061249e565b9796610eba565b95610ed5610ef4610edc928b61249e565b97915050610ecd565b86610ec05796509294509092909190610e42610dd2565b910103610f1d57565b6301842f8c5f526004601cfd5b90816020910312610195575190565b6040513d5f823e3d90fd5b610fb290600473ffffffffffffffffffffffffffffffffffffffff95946020945f526006855260405f20905f5201835260405f206040519586809481937f1e2eaeaf000000000000000000000000000000000000000000000000000000008352600483019190602083019252565b0392165afa918215611011575f92610fe0575b506fffffffffffffffffffffffffffffffff82169160801d90565b61100391925060203d60201161100a575b610ffb818361069f565b810190610f2a565b905f610fc5565b503d610ff1565b610f39565b60081b60020b9060ff1660020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213176105b057603c9060020b028060020b9081036105b05790565b602090602461109373ffffffffffffffffffffffffffffffffffffffff945f52600660205260405f2090565b60405194859384927f1e2eaeaf0000000000000000000000000000000000000000000000000000000084526004840152165afa908115611011575f916110d7575090565b610b4d915060203d60201161100a57610ffb818361069f565b5f80916020815191016a636f6e736f6c652e6c6f675afa50565b90670de0b6b3a7640000820291808304670de0b6b3a764000014901517156105b057565b919082018092116105b057565b6111a28260405161114d60608261069f565b603381527f5b41737365745d20417474656d7074696e6720746f207265747269657665206160208201527f737365745b25735d2066726f6d206172726179000000000000000000000000006040820152611a39565b8060201c808310156111d557506044820291808304604414901517156105b05763ffffffff169081018091116105b05790565b827fbc5f997c000000000000000000000000000000000000000000000000000000005f5260045260245260445ffd5b90916040519160a083019280841067ffffffffffffffff8511176106e05773ffffffffffffffffffffffffffffffffffffffff80935f60806112a694610b4d986040528281528260208201528260408201528260608201520152166112898461126b6106e5565b9716879073ffffffffffffffffffffffffffffffffffffffff169052565b73ffffffffffffffffffffffffffffffffffffffff166020860152565b5f6040850152603c60608501521673ffffffffffffffffffffffffffffffffffffffff166080830152565b6112d961075f565b907f5b52657761726473557064617465725d20456e746572696e67205f6465636f6460208301527f65416e64526577617264000000000000000000000000000000000000000000006040830152565b611330610735565b907f5b52657761726473557064617465725d204465636f64696e672073746172745460208301527f69636b00000000000000000000000000000000000000000000000000000000006040830152565b611387610774565b907f5b52657761726473557064617465725d2052657472696576696e6720706f6f6c60208301527f2025782063757272656e74207469636b000000000000000000000000000000006040830152565b6113de610774565b907f5b52657761726473557064617465725d204465636f64696e672075706461746560208301527f207374617274206c6971756964697479000000000000000000000000000000006040830152565b611435610789565b907f5b52657761726473557064617465725d204465636f64696e6720626f756e647360208301527f206f662072657761726420616d6f756e7473206c6973740000000000000000006040830152565b61148c61075f565b907f5b52657761726473557064617465725d205374617274696e6720636f7265207260208301527f6577617264206c6f6f70000000000000000000000000000000000000000000006040830152565b604051906114ea60808361069f565b604382527f69747900000000000000000000000000000000000000000000000000000000006060837f5b52657761726473557064617465725d20436f6d706c6574656420636f72652060208201527f726577617264206c6f6f702c20636865636b696e6720656e64206c697175696460408201520152565b61156a61079e565b907f5b52657761726473557064617465725d205570646174696e6720676c6f62616c60208301527f2067726f7774682062792063756d756c617469766547726f77746800000000006040830152565b6115dc61169094936115cc61053e6112d1565b6115d761053e611328565b611ab3565b91906115ef846115ea61137f565b611a39565b7f0000000000000000000000000000000000000000000000000000000000000000926116518561163f61162e6116258389611067565b60a01c60020b90565b9461163a61053e6113d6565b611b01565b929061164c61053e61142d565b6117d3565b939061165e61053e611484565b600286810b9083900b136117215761167695876122b2565b9197929590949192915b61168b61053e6114db565b612be6565b906fffffffffffffffffffffffffffffffff82166fffffffffffffffffffffffffffffffff8216036116de57505060016116d8916116cf61053e611562565b0191825461112e565b90559190565b7f6429cfd2000000000000000000000000000000000000000000000000000000005f526fffffffffffffffffffffffffffffffff9081166004521660245260445ffd5b90611733949392916117509688611f7e565b9293919290916fffffffffffffffffffffffffffffffff90911690565b919792959094919291611680565b600573ffffffffffffffffffffffffffffffffffffffff936020935f526006845260405f20905f52018252602460405f2060405194859384927f1e2eaeaf0000000000000000000000000000000000000000000000000000000084526004840152165afa908115611011575f916110d7575090565b906118156040516117e560408261069f565b600f81527f7532342f4c6973742e6c656e67746800000000000000000000000000000000006020820152836118e4565b600380830192803560e81c010190565b600c6106f49161189461186a9594836040519788947f5b43414c4c444154415245414445525d2072656164696e67206e6578742000006020870152603e86019061081f565b7f20627974652873292061742000000000000000000000000000000000000000008152019061081f565b7f206173202573202d3e20257300000000000000000000000000000000000000008152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec81018552018361069f565b9190916118f16003612c88565b80516006811061191e575b5092610e0960036119146106f49596610dfd866124ec565b933560e81c6125e1565b9290916040517f200000000000000000000000000000000000000000000000000000000000000060208201526001815261195960218261069f565b93600603600681116105b057939460015b156119ad575b5f94600180821614611993575b61198c9060011c5b968061249e565b959461196a565b936119856119a461198c928961249e565b9591505061197d565b8461197057945090925090610e096118fc565b611a07610c546106f4926040519283917f9710a9d0000000000000000000000000000000000000000000000000000000006020840152604060248401526064830190610831565b5f6044830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261069f565b610c54611a81916106f4936040519384927f9710a9d0000000000000000000000000000000000000000000000000000000006020850152604060248501526064840190610831565b906044830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261069f565b90611af5604051611ac560408261069f565b600381527f69323400000000000000000000000000000000000000000000000000000000006020820152836118e4565b60038201913560e81d90565b90611b0a6106f6565b917f75313238000000000000000000000000000000000000000000000000000000006020840152803560801c92611b416010612c88565b805160068110611b71575b508291611b61611b6c92610dfd6010966124ec565b90610e0985886125e1565b019190565b9390926040959295517f2000000000000000000000000000000000000000000000000000000000000000602082015260018152611baf60218261069f565b94600603600681116105b057949560015b15611c03575b5f95600180821614611be9575b611be29060011c5b978061249e565b9695611bc0565b94611bdb611bfa611be2928a61249e565b96915050611bd3565b85611bc657929550909350916010611b4c565b611c1e6107b3565b907f5b52657761726473557064617465725d20656e746572696e67205f726577617260208301527f6441626f766500000000000000000000000000000000000000000000000000006040830152565b611c7561074a565b907f5b52657761726473557064617465725d20496e697469616c697a65642c20757060208301527f646174696e67207469636b0000000000000000000000000000000000000000006040830152565b60405190611cd360608361069f565b602582527f636b2025730000000000000000000000000000000000000000000000000000006040837f5b52657761726473557064617465725d20416464696e6720257320746f20746960208201520152565b60405190611d3460408361069f565b601e82527f5b52657761726473557064617465725d204e657720746f74616c3a20257300006020830152565b60405190611d6f60608361069f565b603a82527f2025732067726f777468206f75747369646520627920256531380000000000006040837f5b52657761726473557064617465725d20496e6372656173696e67207469636b60208201520152565b611dc9610789565b907f5b52657761726473557064617465725d2052657472696576656420616e64207560208301527f706461746564206c697175696469747920746f3a2025730000000000000000006040830152565b611e2061074a565b907f5b52657761726473557064617465725d204d61696e20726577617264206c6f6f60208301527f7020636f6d706c6574652e0000000000000000000000000000000000000000006040830152565b611e7761079e565b907f5b52657761726473557064617465725d2052656164696e67206164646974696f60208301527f6e616c20616d6f756e7420666f722063757272656e74207469636b00000000006040830152565b611ece6107b3565b907f5b52657761726473557064617465725d2063757272656e745469636b5265776160208301527f72643a20257300000000000000000000000000000000000000000000000000006040830152565b60405190611f2c60608361069f565b603e82527f6f74616c3a2025732c2063756d756c617469766547726f7774683a20732900006040837f5b52657761726473557064617465725d2046696e616c2076616c75657320287460208201520152565b929394959095611f8f61053e611c16565b60015f985f9660015b156120dd575b5f92611fb6575b611faf9089612919565b9092611f98565b611fc561053e9b94989b611c6d565b5f938686036120b1575b84611fd99161112e565b9a6fffffffffffffffffffffffffffffffff8916611ff68661110a565b046120009161112e565b9761201682899060020b5f5260205260405f2090565b898154906120239161112e565b905561202f828b6127a1565b612038916127d1565b938160020b9061204782612d2b565b61204f611cc4565b91612059926127ea565b8b612062611d25565b9061206c91611a39565b61207590612d2b565b8861207e611d60565b916120889261286b565b612090611dc1565b6fffffffffffffffffffffffffffffffff85166120ac91611a39565b611fa5565b956fffffffffffffffffffffffffffffffff94506120d1611fd991611b01565b90979516949050611fcf565b8060020b8a60020b12611f9e57509597505094509091506120ff61053e611e18565b818103612129575b6121239061211d8688612118611f1d565b612a4a565b82612aca565b93929190565b936121916121239161216d6121556fffffffffffffffffffffffffffffffff999561163a61053e611e6f565b99909916809995612168826115ea611ec6565b61112e565b9761218a6fffffffffffffffffffffffffffffffff88169161110a565b049061112e565b949050612107565b6121a16107b3565b907f5b52657761726473557064617465725d20656e746572696e67205f726577617260208301527f6442656c6f7700000000000000000000000000000000000000000000000000006040830152565b604051906121ff60408361069f565b601a82527f5b52657761726473557064617465725d20746f74616c3a2025730000000000006020830152565b6040519061223a60808361069f565b604e82527f6c69717569646974793a202573290000000000000000000000000000000000006060837f5b52657761726473557064617465725d2072657761726420757064617465206c60208201527f6f6f702028696e697469616c697a65643a2025732c207469636b3a2025732c2060408201520152565b93949196929095966122c561053e612199565b6001935f905f936122dc6122d76121f0565b6119c0565b60015b1561247a575b8a5f9761231881151590650566616c7365604051928060251884016040525f845265047472756500821802186005830152565b908360020b9061234e61232a83612d2b565b61233261222b565b906fffffffffffffffffffffffffffffffff8d16958692612af9565b612367575b5050506123609089610a4c565b90966122df565b919796909461237761053e611c6d565b5f98870361244d575b8861238a9161112e565b946123948961110a565b0461239e9161112e565b956123b4838b9060020b5f5260205260405f2090565b878154906123c19161112e565b90556123cd838c6127a1565b6123d691612bda565b966123e082612d2b565b6123e8611cc4565b916123f2926127ea565b836123fb611d25565b9061240591611a39565b61240e90612d2b565b85612417611d60565b916124219261286b565b612429611dc1565b6fffffffffffffffffffffffffffffffff871661244591611a39565b8a5f80612353565b956fffffffffffffffffffffffffffffffff985061246d61238a91611b01565b9990991698969050612380565b8960020b8160020b13156122e55750955097929550925094506120ff61053e611e18565b6106f4906124c06124ba9493604051958693602085019061081f565b9061081f565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810184528361069f565b90604051916040830190606084016040525f82526f30313233343536373839616263646566600f52603a8401905b600f8116517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8401937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0153600f8160041c1651835360081c81830361251a5790506125d457806130787fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe060429301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffde81019303018252565b632194895a5f526004601cfd5b9190917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe060428460011b011660405101908193602083016040525f83526f30313233343536373839616263646566600f5280018203905b600f8116517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8401937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0153600f8160041c1651835360081c8183036126385790506125d457806130787fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe060029301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffde81019303018252565b610c5490610c286106f494612771612741956040519687957f2ced7cef000000000000000000000000000000000000000000000000000000006020880152606060248801526084870190610831565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc868303016044870152610831565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc848303016064850152610831565b906127cc917f0000000000000000000000000000000000000000000000000000000000000000610f44565b905090565b03908160801c6127dd57565b63c9654ed45f526004601cfd5b610c5490610c28612836936106f4956040519586947fa3f5c739000000000000000000000000000000000000000000000000000000006020870152606060248701526084860190610831565b9160448501527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc848303016064850152610831565b610c54906106f4936128e76128b7946040519586947ff362ca59000000000000000000000000000000000000000000000000000000006020870152606060248701526084860190610831565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc858303016044860152610831565b906064830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261069f565b919060020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213176105b05761299660ff610a7e83603c5f81610b4d970712910503908160020b60081d60010b9160ff1690565b9181031690811b7f07060605060205040602030205040301060502050303040105050304000000006f8421084210842108cc6318c6db6d54be826fffffffffffffffffffffffffffffffff1060071b831560081b1783811c67ffffffffffffffff1060061b1783811c63ffffffff1060051b1783811c61ffff1060041b1783811c60ff1060031b1792831c1c601f161a1761010081141591825f14612a415760ff9103169093611016565b50505f90610b47565b610c5490612a93926106f4946040519485937f969cdd03000000000000000000000000000000000000000000000000000000006020860152606060248601526084850190610831565b9160448401526064830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261069f565b03612ad157565b7f01842f8c000000000000000000000000000000000000000000000000000000005f5260045ffd5b6106f493612ba8612b4894612b78610c54956040519788967f9fd009f50000000000000000000000000000000000000000000000000000000060208901526080602489015260a4880190610831565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc878303016044880152610831565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc858303016064860152610831565b906084830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261069f565b01908160801c6127dd57565b9060036024612bff6020935f52600660205260405f2090565b73ffffffffffffffffffffffffffffffffffffffff60405195869485937f1e2eaeaf000000000000000000000000000000000000000000000000000000008552016004840152165afa8015611011576fffffffffffffffffffffffffffffffff915f91612c6b57501690565b612c84915060203d60201161100a57610ffb818361069f565b1690565b90604051600a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608083019460a084016040525f8652945b0193818106603001855304928315612cfb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600a91612cc0565b92506080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09203019201918252565b5f811215612d72576001612d40911901612c88565b9060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff835193602d81520192018252565b610b4d90612c8856fea164736f6c634300081a000a
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c%\x99\x82\xE5\x14a\0tW\x80c5\xE8\x1Cp\x14a\0oW\x80cb\x88\x9D\xD6\x14a\0jW\x80ck\xC83O\x14a\0eW\x80c\x8D\xB2\xB6R\x14a\0`Wc\xD8mtN\x14a\0[W_\x80\xFD[a\x064V[a\x05\xB5V[a\x04QV[a\x03\x98V[a\x02hV[4a\x01\x95Wa\x01`\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x01\x95Wa\0\xACa\x01\x99V[Pa\0\xB66a\x01\xBCV[Pa\0\xC06a\x01\xEBV[Pa\x01D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x95Wa\0\xE2\x906\x90`\x04\x01a\x02\x1AV[PPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x163\x03a\x01mW\x7F%\x99\x82\xE5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x80R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80`\xA0\x01`\x80\xF3[\x7F\xF82\x86\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[_\x80\xFD[`\x045\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x01\x95WV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC`\xA0\x91\x01\x12a\x01\x95W`$\x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF<`\x80\x91\x01\x12a\x01\x95W`\xC4\x90V[\x91\x81`\x1F\x84\x01\x12\x15a\x01\x95W\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x95W` \x83\x81\x86\x01\x95\x01\x01\x11a\x01\x95WV[`$5\x90\x81`\x02\x0B\x82\x03a\x01\x95WV[`D5\x90\x81`\x02\x0B\x82\x03a\x01\x95WV[4a\x01\x95W`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x01\x95W`\x045a\x02\xA2a\x02HV[a\x02\xDAa\x02\xADa\x06\xF6V[\x7Ftick\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x82\x84a\x08\xBDV[_\x80`\x01[\x15a\x02\xF8W[PP_a\x02\xF2\x82\x84a\nLV[\x91a\x02\xDFV[a\x03\x02W\x80a\x02\xE5V[a\x03\x84\x91a\x03\x94\x93a\x03Ba\x03\x15a\x07\x0BV[\x7FnextTickUp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x84\x83a\x08\xBDV[\x80_R`\x01` Ra\x03x`@_ \x91\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x10gV[`\xA0\x1C`\x02\x0B\x90a\x0BgV[`@Q\x90\x81R\x90\x81\x90` \x82\x01\x90V[\x03\x90\xF3[4a\x01\x95W``\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x01\x95Wa\x03\x94a\x03\x84`\x045a\x03\xD8a\x02HV[a\x03\xE0a\x02XV[\x91a\x04\x19a\x03\xECa\x07 V[\x7FlowerTick\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x83\x83a\x08\xBDV[a\x03Ba\x04$a\x07 V[\x7FupperTick\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x84\x83a\x08\xBDV[4a\x01\x95W` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x01\x95W`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x95Wa\x04\xA0\x906\x90`\x04\x01a\x02\x1AV[a\x04\xFCa\x04\xABa\x075V[\x7F[MockRewardsManager] loading ass` \x82\x01R\x7Fets\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\x0B\xE2V[a\x05\x05\x82a\x17\xD3V[\x90\x80\x82\x03\x82\x81\x11a\x05\xB0W`D\x90\x04` \x1B\x17\x90\x81` \x1C_\x90_\x91[\x81\x83\x10a\x05QWa\x05O\x86\x88a\x05H\x88\x88a\x05Ca\x05>a\x07\xC8V[a\x0B\xE2V[a\x0C\xBAV[PPa\x0F\x14V[\0[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x05p\x84\x87a\x11;V[5``\x1C\x91\x16\x81\x11\x15a\x05\x88W`\x01\x90\x92\x01\x91a\x05\"V[\x7F\x80\xF1\x1A\xCF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[a\t\xE8V[4a\x01\x95Wa\x01\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x01\x95Wa\x05\xEDa\x01\x99V[Pa\x05\xF76a\x01\xBCV[Pa\x06\x016a\x01\xEBV[Pa\x01d5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x95Wa\x06#\x906\x90`\x04\x01a\x02\x1AV[PP`@\x80Q_\x81R_` \x82\x01R\xF3[4a\x01\x95W_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x01\x95W`@\x80Q`<\x81R_` \x82\x01R\xF3[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\xE0W`@RV[a\x06rV[`@Q\x90a\x06\xF4`\xA0\x83a\x06\x9FV[V[`@Q\x90a\x07\x05`@\x83a\x06\x9FV[`\x04\x82RV[`@Q\x90a\x07\x1A`@\x83a\x06\x9FV[`\n\x82RV[`@Q\x90a\x07/`@\x83a\x06\x9FV[`\t\x82RV[`@Q\x90a\x07D``\x83a\x06\x9FV[`#\x82RV[`@Q\x90a\x07Y``\x83a\x06\x9FV[`+\x82RV[`@Q\x90a\x07n``\x83a\x06\x9FV[`*\x82RV[`@Q\x90a\x07\x83``\x83a\x06\x9FV[`0\x82RV[`@Q\x90a\x07\x98``\x83a\x06\x9FV[`7\x82RV[`@Q\x90a\x07\xAD``\x83a\x06\x9FV[`;\x82RV[`@Q\x90a\x07\xC2``\x83a\x06\x9FV[`&\x82RV[a\x07\xD0a\x075V[\x90\x7F[MockRewardsManager] rewarding p` \x83\x01R\x7Fool\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[\x80Q\x91\x90\x82\x90` \x01\x82^\x01_\x81R\x90V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x80\x94\x80Q\x91\x82\x91\x82\x87R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V[\x15a\x08|WPV[a\x08\xB9\x90`@Q\x91\x82\x91\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R` `\x04\x84\x01\x81\x81R\x01\x90a\x081V[\x03\x90\xFD[a\x06\xF4\x92a\t\xE0`\x10a\t~a\t\x90\x95o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x95a\tX`@Qa\tH`\x19\x82a\x08\xF8` \x82\x01\x8Ca\x08\x1FV[\x7F not from regular spacing\0\0\0\0\0\0\0\x81R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF9\x81\x01\x84R\x01\x82a\x06\x9FV[`<\x84`\x02\x0B\x07`\x02\x0B\x15a\x08tV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x0FDV[P\x92`@Q\x95\x86\x91` \x83\x01\x90a\x08\x1FV[\x7F not initialized\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF0\x81\x01\x86R\x01\x84a\x06\x9FV[\x16\x15\x15a\x08tV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[`\x02\x0B`\x01\x01\x90b\x7F\xFF\xFF\x82\x13\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\x83\x12\x17a\x05\xB0WV[\x91\x90a\n\xA8`\xFFa\n~a\nla\x0BM\x94`<_\x81\x83\x07\x12\x91\x05\x03a\n\x15V[\x90\x81`\x02\x0B`\x08\x1D`\x01\x0B\x91`\xFF\x16\x90V[\x92\x90\x80\x96\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x17^V[\x91\x16\x90\x81\x1C`\x01\x81\x19\x01\x16~\x1F\r\x1E\x10\x0C\x1D\x07\x0F\t\x0B\x19\x13\x1C\x17\x06\x01\x0E\x11\x08\n\x1A\x14\x18\x02\x12\x1B\x15\x03\x16\x04\x05`\x1Fa\x01\xE0\x7F\x80@@UC\0RfD2\0\0P a\x06t\x050&\x02\0\0\x10u\x06 \x01v\x11pw`\xFC\x7F\xB6\xDBm\xB6\xDD\xDD\xDD\xDD\xD3M4\xD3I$\x92I!\x08B\x10\x8Cc\x18\xC69\xCEs\x9C\xFF\xFF\xFF\xFF\x86\x02`\xF8\x1C\x16\x1B`\xF7\x1C\x16\x92\x83\x1Cc\xD7dS\xE0\x04\x16\x1A\x17a\x01\0\x81\x14\x15\x91\x82_\x14a\x0BPW\x01`\xFF\x16\x90[\x93a\x10\x16V[\x90V[PP`\xFF\x90a\x0BGV[\x91\x90\x82\x03\x91\x82\x11a\x05\xB0WV[\x90\x91a\x0B~\x81\x83\x90`\x02\x0B_R` R`@_ \x90V[T\x93a\x0B\x95\x81\x84\x90`\x02\x0B_R` R`@_ \x90V[T\x93`\x02\x0B\x91`\x02\x0B\x82\x12_\x14a\x0B\xB2WPPPa\x0BM\x91a\x0BZV[`\x02\x0B\x13a\x0B\xC8WP\x90\x81\x03\x90\x81\x11a\x05\xB0W\x90V[`\x01\x01T\x91\x82\x03\x91\x82\x11a\x05\xB0W\x81\x03\x90\x81\x11a\x05\xB0W\x90V[a\x0C(a\x0CTa\x06\xF4\x92`@Q\x92\x83\x91\x7FA0O\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R` `$\x84\x01\x81\x81R\x01\x90a\x081V[\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x06\x9FV[a\x10\xF0V[`@Q\x90a\x0Ch``\x83a\x06\x9FV[`8\x82R\x7Fassets, building pool id\0\0\0\0\0\0\0\0`@\x83\x7F[PoolRewardsManager] retrieving ` \x82\x01R\x01RV[\x90\x91a\r\"`@Qa\x0C\xCD``\x82a\x06\x9FV[`)\x81R\x7F[PoolRewardsManager] entering _r` \x82\x01R\x7FewardPool\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\x0B\xE2V[a\r~a\r-a\x07JV[\x7F[PoolRewardsManager] decoding as` \x82\x01R\x7Fset indices\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\x0B\xE2V[`@Q\x92a\r\x8D`@\x85a\x06\x9FV[`\x12\x84R\x7Fu32:AssetIndexPair\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x85\x01R\x825`\xE0\x1C\x92a\r\xC7`\x04a,\x88V[\x80Q`\x06\x81\x10a\x0ElW[Pa\x0EBa\x0E0`\x04\x84a\x0E\x0F\x89a\x0Eg\x99\x9A\x9Ba\x0E\t\x85a\x0E\x03a\x0EI\x9Aa\r\xFDa\x0EP\x9Da$\xECV[\x90a\x18%V[\x93a%\xE1V[\x91a&\xF2V[\x01\x94a\x0E\x1Ca\x05>a\x0CYV[a\x0E7a\x0E0a\xFF\xFF\x8B`\x10\x1C\x16\x83a\x11;V[5``\x1C\x90V[\x98a\xFF\xFF\x16\x90a\x11;V[\x860a\x12\x04V[`\xA0\x90 \x90V[a\x0Eb\x81_R`\x01` R`@_ \x90V[a\x15\xB9V[\x90\x92\x91V[\x94\x92\x90\x93\x91`@Q\x7F \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`\x01\x81Ra\x0E\xA9`!\x82a\x06\x9FV[\x95`\x06\x03`\x06\x81\x11a\x05\xB0W\x95\x96`\x01[\x15a\x0E\xFDW[_\x96`\x01\x80\x82\x16\x14a\x0E\xE3W[a\x0E\xDC\x90`\x01\x1C[\x98\x80a$\x9EV[\x97\x96a\x0E\xBAV[\x95a\x0E\xD5a\x0E\xF4a\x0E\xDC\x92\x8Ba$\x9EV[\x97\x91PPa\x0E\xCDV[\x86a\x0E\xC0W\x96P\x92\x94P\x90\x92\x90\x91\x90a\x0EBa\r\xD2V[\x91\x01\x03a\x0F\x1DWV[c\x01\x84/\x8C_R`\x04`\x1C\xFD[\x90\x81` \x91\x03\x12a\x01\x95WQ\x90V[`@Q=_\x82>=\x90\xFD[a\x0F\xB2\x90`\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x95\x94` \x94_R`\x06\x85R`@_ \x90_R\x01\x83R`@_ `@Q\x95\x86\x80\x94\x81\x93\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`\x04\x83\x01\x91\x90` \x83\x01\x92RV[\x03\x92\x16Z\xFA\x91\x82\x15a\x10\x11W_\x92a\x0F\xE0W[Po\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x91`\x80\x1D\x90V[a\x10\x03\x91\x92P` =` \x11a\x10\nW[a\x0F\xFB\x81\x83a\x06\x9FV[\x81\x01\x90a\x0F*V[\x90_a\x0F\xC5V[P=a\x0F\xF1V[a\x0F9V[`\x08\x1B`\x02\x0B\x90`\xFF\x16`\x02\x0B\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\x81\x12b\x7F\xFF\xFF\x82\x13\x17a\x05\xB0W`<\x90`\x02\x0B\x02\x80`\x02\x0B\x90\x81\x03a\x05\xB0W\x90V[` \x90`$a\x10\x93s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x94_R`\x06` R`@_ \x90V[`@Q\x94\x85\x93\x84\x92\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R`\x04\x84\x01R\x16Z\xFA\x90\x81\x15a\x10\x11W_\x91a\x10\xD7WP\x90V[a\x0BM\x91P` =` \x11a\x10\nWa\x0F\xFB\x81\x83a\x06\x9FV[_\x80\x91` \x81Q\x91\x01jconsole.logZ\xFAPV[\x90g\r\xE0\xB6\xB3\xA7d\0\0\x82\x02\x91\x80\x83\x04g\r\xE0\xB6\xB3\xA7d\0\0\x14\x90\x15\x17\x15a\x05\xB0WV[\x91\x90\x82\x01\x80\x92\x11a\x05\xB0WV[a\x11\xA2\x82`@Qa\x11M``\x82a\x06\x9FV[`3\x81R\x7F[Asset] Attempting to retrieve a` \x82\x01R\x7Fsset[%s] from array\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\x1A9V[\x80` \x1C\x80\x83\x10\x15a\x11\xD5WP`D\x82\x02\x91\x80\x83\x04`D\x14\x90\x15\x17\x15a\x05\xB0Wc\xFF\xFF\xFF\xFF\x16\x90\x81\x01\x80\x91\x11a\x05\xB0W\x90V[\x82\x7F\xBC_\x99|\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04R`$R`D_\xFD[\x90\x91`@Q\x91`\xA0\x83\x01\x92\x80\x84\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x11\x17a\x06\xE0Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x93_`\x80a\x12\xA6\x94a\x0BM\x98`@R\x82\x81R\x82` \x82\x01R\x82`@\x82\x01R\x82``\x82\x01R\x01R\x16a\x12\x89\x84a\x12ka\x06\xE5V[\x97\x16\x87\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90RV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16` \x86\x01RV[_`@\x85\x01R`<``\x85\x01R\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x83\x01RV[a\x12\xD9a\x07_V[\x90\x7F[RewardsUpdater] Entering _decod` \x83\x01R\x7FeAndReward\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[a\x130a\x075V[\x90\x7F[RewardsUpdater] Decoding startT` \x83\x01R\x7Fick\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[a\x13\x87a\x07tV[\x90\x7F[RewardsUpdater] Retrieving pool` \x83\x01R\x7F %x current tick\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[a\x13\xDEa\x07tV[\x90\x7F[RewardsUpdater] Decoding update` \x83\x01R\x7F start liquidity\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[a\x145a\x07\x89V[\x90\x7F[RewardsUpdater] Decoding bounds` \x83\x01R\x7F of reward amounts list\0\0\0\0\0\0\0\0\0`@\x83\x01RV[a\x14\x8Ca\x07_V[\x90\x7F[RewardsUpdater] Starting core r` \x83\x01R\x7Feward loop\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[`@Q\x90a\x14\xEA`\x80\x83a\x06\x9FV[`C\x82R\x7Fity\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0``\x83\x7F[RewardsUpdater] Completed core ` \x82\x01R\x7Freward loop, checking end liquid`@\x82\x01R\x01RV[a\x15ja\x07\x9EV[\x90\x7F[RewardsUpdater] Updating global` \x83\x01R\x7F growth by cumulativeGrowth\0\0\0\0\0`@\x83\x01RV[a\x15\xDCa\x16\x90\x94\x93a\x15\xCCa\x05>a\x12\xD1V[a\x15\xD7a\x05>a\x13(V[a\x1A\xB3V[\x91\x90a\x15\xEF\x84a\x15\xEAa\x13\x7FV[a\x1A9V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x92a\x16Q\x85a\x16?a\x16.a\x16%\x83\x89a\x10gV[`\xA0\x1C`\x02\x0B\x90V[\x94a\x16:a\x05>a\x13\xD6V[a\x1B\x01V[\x92\x90a\x16La\x05>a\x14-V[a\x17\xD3V[\x93\x90a\x16^a\x05>a\x14\x84V[`\x02\x86\x81\x0B\x90\x83\x90\x0B\x13a\x17!Wa\x16v\x95\x87a\"\xB2V[\x91\x97\x92\x95\x90\x94\x91\x92\x91[a\x16\x8Ba\x05>a\x14\xDBV[a+\xE6V[\x90o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x03a\x16\xDEWPP`\x01a\x16\xD8\x91a\x16\xCFa\x05>a\x15bV[\x01\x91\x82Ta\x11.V[\x90U\x91\x90V[\x7Fd)\xCF\xD2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_Ro\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16`\x04R\x16`$R`D_\xFD[\x90a\x173\x94\x93\x92\x91a\x17P\x96\x88a\x1F~V[\x92\x93\x91\x92\x90\x91o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x90V[\x91\x97\x92\x95\x90\x94\x91\x92\x91a\x16\x80V[`\x05s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93` \x93_R`\x06\x84R`@_ \x90_R\x01\x82R`$`@_ `@Q\x94\x85\x93\x84\x92\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R`\x04\x84\x01R\x16Z\xFA\x90\x81\x15a\x10\x11W_\x91a\x10\xD7WP\x90V[\x90a\x18\x15`@Qa\x17\xE5`@\x82a\x06\x9FV[`\x0F\x81R\x7Fu24/List.length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x83a\x18\xE4V[`\x03\x80\x83\x01\x92\x805`\xE8\x1C\x01\x01\x90V[`\x0Ca\x06\xF4\x91a\x18\x94a\x18j\x95\x94\x83`@Q\x97\x88\x94\x7F[CALLDATAREADER] reading next \0\0` \x87\x01R`>\x86\x01\x90a\x08\x1FV[\x7F byte(s) at \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x01\x90a\x08\x1FV[\x7F as %s -> %s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xEC\x81\x01\x85R\x01\x83a\x06\x9FV[\x91\x90\x91a\x18\xF1`\x03a,\x88V[\x80Q`\x06\x81\x10a\x19\x1EW[P\x92a\x0E\t`\x03a\x19\x14a\x06\xF4\x95\x96a\r\xFD\x86a$\xECV[\x935`\xE8\x1Ca%\xE1V[\x92\x90\x91`@Q\x7F \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`\x01\x81Ra\x19Y`!\x82a\x06\x9FV[\x93`\x06\x03`\x06\x81\x11a\x05\xB0W\x93\x94`\x01[\x15a\x19\xADW[_\x94`\x01\x80\x82\x16\x14a\x19\x93W[a\x19\x8C\x90`\x01\x1C[\x96\x80a$\x9EV[\x95\x94a\x19jV[\x93a\x19\x85a\x19\xA4a\x19\x8C\x92\x89a$\x9EV[\x95\x91PPa\x19}V[\x84a\x19pW\x94P\x90\x92P\x90a\x0E\ta\x18\xFCV[a\x1A\x07a\x0CTa\x06\xF4\x92`@Q\x92\x83\x91\x7F\x97\x10\xA9\xD0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R`@`$\x84\x01R`d\x83\x01\x90a\x081V[_`D\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x06\x9FV[a\x0CTa\x1A\x81\x91a\x06\xF4\x93`@Q\x93\x84\x92\x7F\x97\x10\xA9\xD0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x85\x01R`@`$\x85\x01R`d\x84\x01\x90a\x081V[\x90`D\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x06\x9FV[\x90a\x1A\xF5`@Qa\x1A\xC5`@\x82a\x06\x9FV[`\x03\x81R\x7Fi24\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x83a\x18\xE4V[`\x03\x82\x01\x915`\xE8\x1D\x90V[\x90a\x1B\na\x06\xF6V[\x91\x7Fu128\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R\x805`\x80\x1C\x92a\x1BA`\x10a,\x88V[\x80Q`\x06\x81\x10a\x1BqW[P\x82\x91a\x1Baa\x1Bl\x92a\r\xFD`\x10\x96a$\xECV[\x90a\x0E\t\x85\x88a%\xE1V[\x01\x91\x90V[\x93\x90\x92`@\x95\x92\x95Q\x7F \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`\x01\x81Ra\x1B\xAF`!\x82a\x06\x9FV[\x94`\x06\x03`\x06\x81\x11a\x05\xB0W\x94\x95`\x01[\x15a\x1C\x03W[_\x95`\x01\x80\x82\x16\x14a\x1B\xE9W[a\x1B\xE2\x90`\x01\x1C[\x97\x80a$\x9EV[\x96\x95a\x1B\xC0V[\x94a\x1B\xDBa\x1B\xFAa\x1B\xE2\x92\x8Aa$\x9EV[\x96\x91PPa\x1B\xD3V[\x85a\x1B\xC6W\x92\x95P\x90\x93P\x91`\x10a\x1BLV[a\x1C\x1Ea\x07\xB3V[\x90\x7F[RewardsUpdater] entering _rewar` \x83\x01R\x7FdAbove\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[a\x1Cua\x07JV[\x90\x7F[RewardsUpdater] Initialized, up` \x83\x01R\x7Fdating tick\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[`@Q\x90a\x1C\xD3``\x83a\x06\x9FV[`%\x82R\x7Fck %s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x7F[RewardsUpdater] Adding %s to ti` \x82\x01R\x01RV[`@Q\x90a\x1D4`@\x83a\x06\x9FV[`\x1E\x82R\x7F[RewardsUpdater] New total: %s\0\0` \x83\x01RV[`@Q\x90a\x1Do``\x83a\x06\x9FV[`:\x82R\x7F %s growth outside by %e18\0\0\0\0\0\0`@\x83\x7F[RewardsUpdater] Increasing tick` \x82\x01R\x01RV[a\x1D\xC9a\x07\x89V[\x90\x7F[RewardsUpdater] Retrieved and u` \x83\x01R\x7Fpdated liquidity to: %s\0\0\0\0\0\0\0\0\0`@\x83\x01RV[a\x1E a\x07JV[\x90\x7F[RewardsUpdater] Main reward loo` \x83\x01R\x7Fp complete.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[a\x1Ewa\x07\x9EV[\x90\x7F[RewardsUpdater] Reading additio` \x83\x01R\x7Fnal amount for current tick\0\0\0\0\0`@\x83\x01RV[a\x1E\xCEa\x07\xB3V[\x90\x7F[RewardsUpdater] currentTickRewa` \x83\x01R\x7Frd: %s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[`@Q\x90a\x1F,``\x83a\x06\x9FV[`>\x82R\x7Fotal: %s, cumulativeGrowth: s)\0\0`@\x83\x7F[RewardsUpdater] Final values (t` \x82\x01R\x01RV[\x92\x93\x94\x95\x90\x95a\x1F\x8Fa\x05>a\x1C\x16V[`\x01_\x98_\x96`\x01[\x15a \xDDW[_\x92a\x1F\xB6W[a\x1F\xAF\x90\x89a)\x19V[\x90\x92a\x1F\x98V[a\x1F\xC5a\x05>\x9B\x94\x98\x9Ba\x1CmV[_\x93\x86\x86\x03a \xB1W[\x84a\x1F\xD9\x91a\x11.V[\x9Ao\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16a\x1F\xF6\x86a\x11\nV[\x04a \0\x91a\x11.V[\x97a \x16\x82\x89\x90`\x02\x0B_R` R`@_ \x90V[\x89\x81T\x90a #\x91a\x11.V[\x90Ua /\x82\x8Ba'\xA1V[a 8\x91a'\xD1V[\x93\x81`\x02\x0B\x90a G\x82a-+V[a Oa\x1C\xC4V[\x91a Y\x92a'\xEAV[\x8Ba ba\x1D%V[\x90a l\x91a\x1A9V[a u\x90a-+V[\x88a ~a\x1D`V[\x91a \x88\x92a(kV[a \x90a\x1D\xC1V[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16a \xAC\x91a\x1A9V[a\x1F\xA5V[\x95o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x94Pa \xD1a\x1F\xD9\x91a\x1B\x01V[\x90\x97\x95\x16\x94\x90Pa\x1F\xCFV[\x80`\x02\x0B\x8A`\x02\x0B\x12a\x1F\x9EWP\x95\x97PP\x94P\x90\x91Pa \xFFa\x05>a\x1E\x18V[\x81\x81\x03a!)W[a!#\x90a!\x1D\x86\x88a!\x18a\x1F\x1DV[a*JV[\x82a*\xCAV[\x93\x92\x91\x90V[\x93a!\x91a!#\x91a!ma!Uo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x99\x95a\x16:a\x05>a\x1EoV[\x99\x90\x99\x16\x80\x99\x95a!h\x82a\x15\xEAa\x1E\xC6V[a\x11.V[\x97a!\x8Ao\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x91a\x11\nV[\x04\x90a\x11.V[\x94\x90Pa!\x07V[a!\xA1a\x07\xB3V[\x90\x7F[RewardsUpdater] entering _rewar` \x83\x01R\x7FdBelow\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x83\x01RV[`@Q\x90a!\xFF`@\x83a\x06\x9FV[`\x1A\x82R\x7F[RewardsUpdater] total: %s\0\0\0\0\0\0` \x83\x01RV[`@Q\x90a\":`\x80\x83a\x06\x9FV[`N\x82R\x7Fliquidity: %s)\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0``\x83\x7F[RewardsUpdater] reward update l` \x82\x01R\x7Foop (initialized: %s, tick: %s, `@\x82\x01R\x01RV[\x93\x94\x91\x96\x92\x90\x95\x96a\"\xC5a\x05>a!\x99V[`\x01\x93_\x90_\x93a\"\xDCa\"\xD7a!\xF0V[a\x19\xC0V[`\x01[\x15a$zW[\x8A_\x97a#\x18\x81\x15\x15\x90e\x05false`@Q\x92\x80`%\x18\x84\x01`@R_\x84Re\x04true\0\x82\x18\x02\x18`\x05\x83\x01RV[\x90\x83`\x02\x0B\x90a#Na#*\x83a-+V[a#2a\"+V[\x90o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8D\x16\x95\x86\x92a*\xF9V[a#gW[PPPa#`\x90\x89a\nLV[\x90\x96a\"\xDFV[\x91\x97\x96\x90\x94a#wa\x05>a\x1CmV[_\x98\x87\x03a$MW[\x88a#\x8A\x91a\x11.V[\x94a#\x94\x89a\x11\nV[\x04a#\x9E\x91a\x11.V[\x95a#\xB4\x83\x8B\x90`\x02\x0B_R` R`@_ \x90V[\x87\x81T\x90a#\xC1\x91a\x11.V[\x90Ua#\xCD\x83\x8Ca'\xA1V[a#\xD6\x91a+\xDAV[\x96a#\xE0\x82a-+V[a#\xE8a\x1C\xC4V[\x91a#\xF2\x92a'\xEAV[\x83a#\xFBa\x1D%V[\x90a$\x05\x91a\x1A9V[a$\x0E\x90a-+V[\x85a$\x17a\x1D`V[\x91a$!\x92a(kV[a$)a\x1D\xC1V[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16a$E\x91a\x1A9V[\x8A_\x80a#SV[\x95o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x98Pa$ma#\x8A\x91a\x1B\x01V[\x99\x90\x99\x16\x98\x96\x90Pa#\x80V[\x89`\x02\x0B\x81`\x02\x0B\x13\x15a\"\xE5WP\x95P\x97\x92\x95P\x92P\x94Pa \xFFa\x05>a\x1E\x18V[a\x06\xF4\x90a$\xC0a$\xBA\x94\x93`@Q\x95\x86\x93` \x85\x01\x90a\x08\x1FV[\x90a\x08\x1FV[\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x84R\x83a\x06\x9FV[\x90`@Q\x91`@\x83\x01\x90``\x84\x01`@R_\x82Ro0123456789abcdef`\x0FR`:\x84\x01\x90[`\x0F\x81\x16Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\x84\x01\x93\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x01S`\x0F\x81`\x04\x1C\x16Q\x83S`\x08\x1C\x81\x83\x03a%\x1AW\x90Pa%\xD4W\x80a0x\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`B\x93\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDE\x81\x01\x93\x03\x01\x82RV[c!\x94\x89Z_R`\x04`\x1C\xFD[\x91\x90\x91\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`B\x84`\x01\x1B\x01\x16`@Q\x01\x90\x81\x93` \x83\x01`@R_\x83Ro0123456789abcdef`\x0FR\x80\x01\x82\x03\x90[`\x0F\x81\x16Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\x84\x01\x93\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x01S`\x0F\x81`\x04\x1C\x16Q\x83S`\x08\x1C\x81\x83\x03a&8W\x90Pa%\xD4W\x80a0x\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x02\x93\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDE\x81\x01\x93\x03\x01\x82RV[a\x0CT\x90a\x0C(a\x06\xF4\x94a'qa'A\x95`@Q\x96\x87\x95\x7F,\xED|\xEF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x88\x01R```$\x88\x01R`\x84\x87\x01\x90a\x081V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC\x86\x83\x03\x01`D\x87\x01Ra\x081V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC\x84\x83\x03\x01`d\x85\x01Ra\x081V[\x90a'\xCC\x91\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x0FDV[\x90P\x90V[\x03\x90\x81`\x80\x1Ca'\xDDWV[c\xC9eN\xD4_R`\x04`\x1C\xFD[a\x0CT\x90a\x0C(a(6\x93a\x06\xF4\x95`@Q\x95\x86\x94\x7F\xA3\xF5\xC79\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x87\x01R```$\x87\x01R`\x84\x86\x01\x90a\x081V[\x91`D\x85\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC\x84\x83\x03\x01`d\x85\x01Ra\x081V[a\x0CT\x90a\x06\xF4\x93a(\xE7a(\xB7\x94`@Q\x95\x86\x94\x7F\xF3b\xCAY\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x87\x01R```$\x87\x01R`\x84\x86\x01\x90a\x081V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC\x85\x83\x03\x01`D\x86\x01Ra\x081V[\x90`d\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x06\x9FV[\x91\x90`\x02\x0B\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\x81\x12b\x7F\xFF\xFF\x82\x13\x17a\x05\xB0Wa)\x96`\xFFa\n~\x83`<_\x81a\x0BM\x97\x07\x12\x91\x05\x03\x90\x81`\x02\x0B`\x08\x1D`\x01\x0B\x91`\xFF\x16\x90V[\x91\x81\x03\x16\x90\x81\x1B\x7F\x07\x06\x06\x05\x06\x02\x05\x04\x06\x02\x03\x02\x05\x04\x03\x01\x06\x05\x02\x05\x03\x03\x04\x01\x05\x05\x03\x04\0\0\0\0o\x84!\x08B\x10\x84!\x08\xCCc\x18\xC6\xDBmT\xBE\x82o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x10`\x07\x1B\x83\x15`\x08\x1B\x17\x83\x81\x1Cg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x10`\x06\x1B\x17\x83\x81\x1Cc\xFF\xFF\xFF\xFF\x10`\x05\x1B\x17\x83\x81\x1Ca\xFF\xFF\x10`\x04\x1B\x17\x83\x81\x1C`\xFF\x10`\x03\x1B\x17\x92\x83\x1C\x1C`\x1F\x16\x1A\x17a\x01\0\x81\x14\x15\x91\x82_\x14a*AW`\xFF\x91\x03\x16\x90\x93a\x10\x16V[PP_\x90a\x0BGV[a\x0CT\x90a*\x93\x92a\x06\xF4\x94`@Q\x94\x85\x93\x7F\x96\x9C\xDD\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x86\x01R```$\x86\x01R`\x84\x85\x01\x90a\x081V[\x91`D\x84\x01R`d\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x06\x9FV[\x03a*\xD1WV[\x7F\x01\x84/\x8C\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[a\x06\xF4\x93a+\xA8a+H\x94a+xa\x0CT\x95`@Q\x97\x88\x96\x7F\x9F\xD0\t\xF5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x89\x01R`\x80`$\x89\x01R`\xA4\x88\x01\x90a\x081V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC\x87\x83\x03\x01`D\x88\x01Ra\x081V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC\x85\x83\x03\x01`d\x86\x01Ra\x081V[\x90`\x84\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x06\x9FV[\x01\x90\x81`\x80\x1Ca'\xDDWV[\x90`\x03`$a+\xFF` \x93_R`\x06` R`@_ \x90V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x95\x86\x94\x85\x93\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R\x01`\x04\x84\x01R\x16Z\xFA\x80\x15a\x10\x11Wo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91_\x91a,kWP\x16\x90V[a,\x84\x91P` =` \x11a\x10\nWa\x0F\xFB\x81\x83a\x06\x9FV[\x16\x90V[\x90`@Q`\n\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x80\x83\x01\x94`\xA0\x84\x01`@R_\x86R\x94[\x01\x93\x81\x81\x06`0\x01\x85S\x04\x92\x83\x15a,\xFBW\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\n\x91a,\xC0V[\x92P`\x80\x83\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x92\x03\x01\x92\x01\x91\x82RV[_\x81\x12\x15a-rW`\x01a-@\x91\x19\x01a,\x88V[\x90`\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83Q\x93`-\x81R\x01\x92\x01\x82RV[a\x0BM\x90a,\x88V\xFE\xA1dsolcC\0\x08\x1A\0\n",
    );
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct BalanceDelta(alloy::sol_types::private::I256);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<BalanceDelta> for alloy::sol_types::private::I256 {
            #[inline]
            fn stv_to_tokens(
                &self
            ) -> <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::Token<'_>
            {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Int<256>,
                >::stv_to_tokens(self)
            }

            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::tokenize(self).0
            }

            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }

            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::abi_encoded_size(
                    self
                )
            }
        }
        #[automatically_derived]
        impl BalanceDelta {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);

            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: alloy::sol_types::private::I256) -> Self {
                Self(value)
            }

            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> alloy::sol_types::private::I256 {
                self.0
            }

            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }

            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for BalanceDelta {
            type RustType = alloy::sol_types::private::I256;
            type Token<'a> =
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::Token<'a>;

            const ENCODED_SIZE: Option<usize> =
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Int<
                256,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            const SOL_NAME: &'static str = Self::NAME;

            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }

            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::type_check(
                    token
                )
            }

            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::detokenize(
                    token
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for BalanceDelta {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }

            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>
            ) {
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }

            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::EventTopic>::encode_topic(
                    rust
                )
            }
        }
    };
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Currency(alloy::sol_types::private::Address);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Currency> for alloy::sol_types::private::Address {
            #[inline]
            fn stv_to_tokens(
                &self
            ) -> <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::Token<'_>
            {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Address,
                >::stv_to_tokens(self)
            }

            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(self).0
            }

            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::abi_encode_packed_to(
                    self,
                    out,
                )
            }

            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::abi_encoded_size(
                    self
                )
            }
        }
        #[automatically_derived]
        impl Currency {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);

            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: alloy::sol_types::private::Address) -> Self {
                Self(value)
            }

            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> alloy::sol_types::private::Address {
                self.0
            }

            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }

            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Currency {
            type RustType = alloy::sol_types::private::Address;
            type Token<'a> =
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::Token<'a>;

            const ENCODED_SIZE: Option<usize> =
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            const SOL_NAME: &'static str = Self::NAME;

            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }

            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::type_check(token)
            }

            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Currency {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                    rust,
                )
            }

            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>
            ) {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    out,
                )
            }

            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    rust
                )
            }
        }
    };
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct PoolId(alloy::sol_types::private::FixedBytes<32>);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<PoolId> for alloy::sol_types::private::FixedBytes<32> {
            #[inline]
            fn stv_to_tokens(
                &self
            ) -> <alloy::sol_types::sol_data::FixedBytes<32> as alloy_sol_types::SolType>::Token<'_>
            {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >::stv_to_tokens(self)
            }

            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::FixedBytes<32> as alloy_sol_types::SolType>::tokenize(
                    self
                )
                .0
            }

            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }

            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl PoolId {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);

            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: alloy::sol_types::private::FixedBytes<32>) -> Self {
                Self(value)
            }

            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> alloy::sol_types::private::FixedBytes<32> {
                self.0
            }

            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }

            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for PoolId {
            type RustType = alloy::sol_types::private::FixedBytes<32>;
            type Token<'a> =
                <alloy::sol_types::sol_data::FixedBytes<32> as alloy_sol_types::SolType>::Token<'a>;

            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::FixedBytes<
                32,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::FixedBytes<
                32,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            const SOL_NAME: &'static str = Self::NAME;

            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }

            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::FixedBytes<32> as alloy_sol_types::SolType>::type_check(
                    token
                )
            }

            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::FixedBytes<32> as alloy_sol_types::SolType>::detokenize(
                    token
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for PoolId {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }

            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>
            ) {
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }

            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**```solidity
    struct ModifyLiquidityParams { int24 tickLower; int24 tickUpper; int256 liquidityDelta; bytes32 salt; }
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ModifyLiquidityParams {
        pub tickLower: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
        pub tickUpper: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
        pub liquidityDelta: alloy::sol_types::private::I256,
        pub salt:           alloy::sol_types::private::FixedBytes<32>
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Int<24>,
            alloy::sol_types::sol_data::Int<24>,
            alloy::sol_types::sol_data::Int<256>,
            alloy::sol_types::sol_data::FixedBytes<32>
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::I256,
            alloy::sol_types::private::FixedBytes<32>
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ModifyLiquidityParams> for UnderlyingRustTuple<'_> {
            fn from(value: ModifyLiquidityParams) -> Self {
                (value.tickLower, value.tickUpper, value.liquidityDelta, value.salt)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ModifyLiquidityParams {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    tickLower:      tuple.0,
                    tickUpper:      tuple.1,
                    liquidityDelta: tuple.2,
                    salt:           tuple.3
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ModifyLiquidityParams {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ModifyLiquidityParams {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickLower),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickUpper),
                    <alloy::sol_types::sol_data::Int<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.liquidityDelta),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.salt),
                )
            }

            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }

            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }

            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encode_packed_to(
                    &tuple, out
                )
            }

            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_packed_encoded_size(
                    &tuple
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ModifyLiquidityParams {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<'a> as alloy_sol_types::SolType>::Token<'a>;

            const ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;

            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }

            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ModifyLiquidityParams {
            const NAME: &'static str = "ModifyLiquidityParams";

            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ModifyLiquidityParams(int24 tickLower,int24 tickUpper,int256 \
                     liquidityDelta,bytes32 salt)"
                )
            }

            #[inline]
            fn eip712_components(
            ) -> alloy_sol_types::private::Vec<alloy_sol_types::private::Cow<'static, str>>
            {
                alloy_sol_types::private::Vec::new()
            }

            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }

            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tickLower)
                        .0,
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tickUpper)
                        .0,
                    <alloy::sol_types::sol_data::Int<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.liquidityDelta,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.salt)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ModifyLiquidityParams {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tickLower,
                    )
                    + <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tickUpper,
                    )
                    + <alloy::sol_types::sol_data::Int<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.liquidityDelta,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.salt)
            }

            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>
            ) {
                out.reserve(<Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust));
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tickLower,
                    out,
                );
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tickUpper,
                    out,
                );
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.liquidityDelta,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.salt,
                    out,
                );
            }

            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, &mut out);
                alloy_sol_types::abi::token::WordToken(alloy_sol_types::private::keccak256(out))
            }
        }
    };
    /**```solidity
    struct PoolKey { Currency currency0; Currency currency1; uint24 fee; int24 tickSpacing; address hooks; }
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct PoolKey {
        pub currency0:   <Currency as alloy::sol_types::SolType>::RustType,
        pub currency1:   <Currency as alloy::sol_types::SolType>::RustType,
        pub fee: <alloy::sol_types::sol_data::Uint<24> as alloy::sol_types::SolType>::RustType,
        pub tickSpacing:
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
        pub hooks:       alloy::sol_types::private::Address
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            Currency,
            Currency,
            alloy::sol_types::sol_data::Uint<24>,
            alloy::sol_types::sol_data::Int<24>,
            alloy::sol_types::sol_data::Address
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <Currency as alloy::sol_types::SolType>::RustType,
            <Currency as alloy::sol_types::SolType>::RustType,
            <alloy::sol_types::sol_data::Uint<24> as alloy::sol_types::SolType>::RustType,
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::Address
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PoolKey> for UnderlyingRustTuple<'_> {
            fn from(value: PoolKey) -> Self {
                (value.currency0, value.currency1, value.fee, value.tickSpacing, value.hooks)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for PoolKey {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    currency0:   tuple.0,
                    currency1:   tuple.1,
                    fee:         tuple.2,
                    tickSpacing: tuple.3,
                    hooks:       tuple.4
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for PoolKey {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for PoolKey {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <Currency as alloy_sol_types::SolType>::tokenize(&self.currency0),
                    <Currency as alloy_sol_types::SolType>::tokenize(&self.currency1),
                    <alloy::sol_types::sol_data::Uint<24> as alloy_sol_types::SolType>::tokenize(
                        &self.fee
                    ),
                    <alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickSpacing
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.hooks
                    )
                )
            }

            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }

            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }

            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encode_packed_to(
                    &tuple, out
                )
            }

            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_packed_encoded_size(
                    &tuple
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for PoolKey {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<'a> as alloy_sol_types::SolType>::Token<'a>;

            const ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;

            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }

            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for PoolKey {
            const NAME: &'static str = "PoolKey";

            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "PoolKey(address currency0,address currency1,uint24 fee,int24 \
                     tickSpacing,address hooks)"
                )
            }

            #[inline]
            fn eip712_components(
            ) -> alloy_sol_types::private::Vec<alloy_sol_types::private::Cow<'static, str>>
            {
                alloy_sol_types::private::Vec::new()
            }

            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }

            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <Currency as alloy_sol_types::SolType>::eip712_data_word(
                            &self.currency0,
                        )
                        .0,
                    <Currency as alloy_sol_types::SolType>::eip712_data_word(
                            &self.currency1,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.fee)
                        .0,
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tickSpacing)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.hooks,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for PoolKey {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <Currency as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.currency0,
                    )
                    + <Currency as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.currency1,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.fee)
                    + <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tickSpacing,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.hooks,
                    )
            }

            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>
            ) {
                out.reserve(<Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust));
                <Currency as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.currency0,
                    out
                );
                <Currency as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.currency1,
                    out
                );
                <alloy::sol_types::sol_data::Uint<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.fee, out);
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tickSpacing,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.hooks,
                    out,
                );
            }

            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, &mut out);
                alloy_sol_types::abi::token::WordToken(alloy_sol_types::private::keccak256(out))
            }
        }
    };
    /**Custom error with signature `AssetsOutOfOrderOrNotUnique()` and selector `0x80f11acf`.
    ```solidity
    error AssetsOutOfOrderOrNotUnique();
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct AssetsOutOfOrderOrNotUnique {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AssetsOutOfOrderOrNotUnique> for UnderlyingRustTuple<'_> {
            fn from(value: AssetsOutOfOrderOrNotUnique) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AssetsOutOfOrderOrNotUnique {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AssetsOutOfOrderOrNotUnique {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [128u8, 241u8, 26u8, 207u8];
            const SIGNATURE: &'static str = "AssetsOutOfOrderOrNotUnique()";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `MissingHookPermissions(uint160)` and selector `0x75383228`.
    ```solidity
    error MissingHookPermissions(uint160);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct MissingHookPermissions {
        pub _0: <alloy::sol_types::sol_data::Uint<160> as alloy::sol_types::SolType>::RustType
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<160>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> =
            (<alloy::sol_types::sol_data::Uint<160> as alloy::sol_types::SolType>::RustType,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MissingHookPermissions> for UnderlyingRustTuple<'_> {
            fn from(value: MissingHookPermissions) -> Self {
                (value._0,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MissingHookPermissions {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { _0: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for MissingHookPermissions {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [117u8, 56u8, 50u8, 40u8];
            const SIGNATURE: &'static str = "MissingHookPermissions(uint160)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Uint<160> as alloy_sol_types::SolType>::tokenize(
                    &self._0
                ),)
            }
        }
    };
    /**Custom error with signature `NotUniswap()` and selector `0xf8328614`.
    ```solidity
    error NotUniswap();
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct NotUniswap {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotUniswap> for UnderlyingRustTuple<'_> {
            fn from(value: NotUniswap) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotUniswap {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotUniswap {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [248u8, 50u8, 134u8, 20u8];
            const SIGNATURE: &'static str = "NotUniswap()";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OutOfBoundRead(uint256,uint256)` and selector `0xbc5f997c`.
    ```solidity
    error OutOfBoundRead(uint256 arrayIndex, uint256 arrayLength);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct OutOfBoundRead {
        pub arrayIndex:  alloy::sol_types::private::U256,
        pub arrayLength: alloy::sol_types::private::U256
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> =
            (alloy::sol_types::sol_data::Uint<256>, alloy::sol_types::sol_data::Uint<256>);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> =
            (alloy::sol_types::private::U256, alloy::sol_types::private::U256);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OutOfBoundRead> for UnderlyingRustTuple<'_> {
            fn from(value: OutOfBoundRead) -> Self {
                (value.arrayIndex, value.arrayLength)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OutOfBoundRead {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { arrayIndex: tuple.0, arrayLength: tuple.1 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OutOfBoundRead {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [188u8, 95u8, 153u8, 124u8];
            const SIGNATURE: &'static str = "OutOfBoundRead(uint256,uint256)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.arrayIndex
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.arrayLength
                    )
                )
            }
        }
    };
    /**Custom error with signature `ReaderNotAtEnd()` and selector `0x01842f8c`.
    ```solidity
    error ReaderNotAtEnd();
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ReaderNotAtEnd {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ReaderNotAtEnd> for UnderlyingRustTuple<'_> {
            fn from(value: ReaderNotAtEnd) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ReaderNotAtEnd {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ReaderNotAtEnd {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [1u8, 132u8, 47u8, 140u8];
            const SIGNATURE: &'static str = "ReaderNotAtEnd()";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `WrongEndLiquidity(uint128,uint128)` and selector `0x6429cfd2`.
    ```solidity
    error WrongEndLiquidity(uint128, uint128);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct WrongEndLiquidity {
        pub _0: u128,
        pub _1: u128
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> =
            (alloy::sol_types::sol_data::Uint<128>, alloy::sol_types::sol_data::Uint<128>);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (u128, u128);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<WrongEndLiquidity> for UnderlyingRustTuple<'_> {
            fn from(value: WrongEndLiquidity) -> Self {
                (value._0, value._1)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for WrongEndLiquidity {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { _0: tuple.0, _1: tuple.1 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for WrongEndLiquidity {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [100u8, 41u8, 207u8, 210u8];
            const SIGNATURE: &'static str = "WrongEndLiquidity(uint128,uint128)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self._0
                    ),
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self._1
                    )
                )
            }
        }
    };
    /**Constructor`.
    ```solidity
    constructor(address uniV4PoolManager);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub uniV4PoolManager: alloy::sol_types::private::Address
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.uniV4PoolManager,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { uniV4PoolManager: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                    &self.uniV4PoolManager
                ),)
            }
        }
    };
    /**Function with signature `afterRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,bytes)` and selector `0x8db2b652`.
    ```solidity
    function afterRemoveLiquidity(address, PoolKey memory, ModifyLiquidityParams memory, BalanceDelta, bytes memory) external pure returns (bytes4, BalanceDelta);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct afterRemoveLiquidityCall {
        pub _0: alloy::sol_types::private::Address,
        pub _1: <PoolKey as alloy::sol_types::SolType>::RustType,
        pub _2: <ModifyLiquidityParams as alloy::sol_types::SolType>::RustType,
        pub _3: <BalanceDelta as alloy::sol_types::SolType>::RustType,
        pub _4: alloy::sol_types::private::Bytes
    }
    ///Container type for the return parameters of the
    /// [`afterRemoveLiquidity(address,(address,address,uint24,int24,address),
    /// (int24,int24,int256,bytes32),int256,bytes)`](afterRemoveLiquidityCall)
    /// function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct afterRemoveLiquidityReturn {
        pub _0: alloy::sol_types::private::FixedBytes<4>,
        pub _1: <BalanceDelta as alloy::sol_types::SolType>::RustType
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                PoolKey,
                ModifyLiquidityParams,
                BalanceDelta,
                alloy::sol_types::sol_data::Bytes
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                <PoolKey as alloy::sol_types::SolType>::RustType,
                <ModifyLiquidityParams as alloy::sol_types::SolType>::RustType,
                <BalanceDelta as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<afterRemoveLiquidityCall> for UnderlyingRustTuple<'_> {
                fn from(value: afterRemoveLiquidityCall) -> Self {
                    (value._0, value._1, value._2, value._3, value._4)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for afterRemoveLiquidityCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1, _2: tuple.2, _3: tuple.3, _4: tuple.4 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>, BalanceDelta);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<4>,
                <BalanceDelta as alloy::sol_types::SolType>::RustType
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<afterRemoveLiquidityReturn> for UnderlyingRustTuple<'_> {
                fn from(value: afterRemoveLiquidityReturn) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for afterRemoveLiquidityReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for afterRemoveLiquidityCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                PoolKey,
                ModifyLiquidityParams,
                BalanceDelta,
                alloy::sol_types::sol_data::Bytes
            );
            type Return = afterRemoveLiquidityReturn;
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>, BalanceDelta);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [141u8, 178u8, 182u8, 82u8];
            const SIGNATURE: &'static str = "afterRemoveLiquidity(address,(address,address,uint24,\
                                             int24,address),(int24,int24,int256,bytes32),int256,\
                                             bytes)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0
                    ),
                    <PoolKey as alloy_sol_types::SolType>::tokenize(&self._1),
                    <ModifyLiquidityParams as alloy_sol_types::SolType>::tokenize(&self._2),
                    <BalanceDelta as alloy_sol_types::SolType>::tokenize(&self._3),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._4
                    )
                )
            }

            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `beforeAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)` and selector `0x259982e5`.
    ```solidity
    function beforeAddLiquidity(address, PoolKey memory, ModifyLiquidityParams memory, bytes memory) external view returns (bytes4);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct beforeAddLiquidityCall {
        pub _0: alloy::sol_types::private::Address,
        pub _1: <PoolKey as alloy::sol_types::SolType>::RustType,
        pub _2: <ModifyLiquidityParams as alloy::sol_types::SolType>::RustType,
        pub _3: alloy::sol_types::private::Bytes
    }
    ///Container type for the return parameters of the
    /// [`beforeAddLiquidity(address,(address,address,uint24,int24,address),
    /// (int24,int24,int256,bytes32),bytes)`](beforeAddLiquidityCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct beforeAddLiquidityReturn {
        pub _0: alloy::sol_types::private::FixedBytes<4>
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                PoolKey,
                ModifyLiquidityParams,
                alloy::sol_types::sol_data::Bytes
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                <PoolKey as alloy::sol_types::SolType>::RustType,
                <ModifyLiquidityParams as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<beforeAddLiquidityCall> for UnderlyingRustTuple<'_> {
                fn from(value: beforeAddLiquidityCall) -> Self {
                    (value._0, value._1, value._2, value._3)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for beforeAddLiquidityCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1, _2: tuple.2, _3: tuple.3 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<beforeAddLiquidityReturn> for UnderlyingRustTuple<'_> {
                fn from(value: beforeAddLiquidityReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for beforeAddLiquidityReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for beforeAddLiquidityCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                PoolKey,
                ModifyLiquidityParams,
                alloy::sol_types::sol_data::Bytes
            );
            type Return = beforeAddLiquidityReturn;
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [37u8, 153u8, 130u8, 229u8];
            const SIGNATURE: &'static str = "beforeAddLiquidity(address,(address,address,uint24,\
                                             int24,address),(int24,int24,int256,bytes32),bytes)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0
                    ),
                    <PoolKey as alloy_sol_types::SolType>::tokenize(&self._1),
                    <ModifyLiquidityParams as alloy_sol_types::SolType>::tokenize(&self._2),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._3
                    )
                )
            }

            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `consts()` and selector `0xd86d744e`.
    ```solidity
    function consts() external pure returns (int24 tickSpacing, uint24 poolFee);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constsCall {}
    ///Container type for the return parameters of the [`consts()`](constsCall)
    /// function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constsReturn {
        pub tickSpacing:
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
        pub poolFee: <alloy::sol_types::sol_data::Uint<24> as alloy::sol_types::SolType>::RustType
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constsCall> for UnderlyingRustTuple<'_> {
                fn from(value: constsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Int<24>, alloy::sol_types::sol_data::Uint<24>);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
                <alloy::sol_types::sol_data::Uint<24> as alloy::sol_types::SolType>::RustType
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: constsReturn) -> Self {
                    (value.tickSpacing, value.poolFee)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { tickSpacing: tuple.0, poolFee: tuple.1 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for constsCall {
            type Parameters<'a> = ();
            type Return = constsReturn;
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type ReturnTuple<'a> =
                (alloy::sol_types::sol_data::Int<24>, alloy::sol_types::sol_data::Uint<24>);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [216u8, 109u8, 116u8, 78u8];
            const SIGNATURE: &'static str = "consts()";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }

            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `getGrowthInsideRange(bytes32,int24,int24)` and selector `0x62889dd6`.
    ```solidity
    function getGrowthInsideRange(PoolId id, int24 lowerTick, int24 upperTick) external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getGrowthInsideRangeCall {
        pub id:        <PoolId as alloy::sol_types::SolType>::RustType,
        pub lowerTick: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
        pub upperTick: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType
    }
    ///Container type for the return parameters of the
    /// [`getGrowthInsideRange(bytes32,int24,int24)`](getGrowthInsideRangeCall)
    /// function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getGrowthInsideRangeReturn {
        pub _0: alloy::sol_types::private::U256
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (PoolId, alloy::sol_types::sol_data::Int<24>, alloy::sol_types::sol_data::Int<24>);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <PoolId as alloy::sol_types::SolType>::RustType,
                <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
                <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getGrowthInsideRangeCall> for UnderlyingRustTuple<'_> {
                fn from(value: getGrowthInsideRangeCall) -> Self {
                    (value.id, value.lowerTick, value.upperTick)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getGrowthInsideRangeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { id: tuple.0, lowerTick: tuple.1, upperTick: tuple.2 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getGrowthInsideRangeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getGrowthInsideRangeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getGrowthInsideRangeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getGrowthInsideRangeCall {
            type Parameters<'a> =
                (PoolId, alloy::sol_types::sol_data::Int<24>, alloy::sol_types::sol_data::Int<24>);
            type Return = getGrowthInsideRangeReturn;
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [98u8, 136u8, 157u8, 214u8];
            const SIGNATURE: &'static str = "getGrowthInsideRange(bytes32,int24,int24)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <PoolId as alloy_sol_types::SolType>::tokenize(&self.id),
                    <alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.lowerTick
                    ),
                    <alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.upperTick
                    )
                )
            }

            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `getGrowthInsideTick(bytes32,int24)` and selector `0x35e81c70`.
    ```solidity
    function getGrowthInsideTick(PoolId id, int24 tick) external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getGrowthInsideTickCall {
        pub id:   <PoolId as alloy::sol_types::SolType>::RustType,
        pub tick: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType
    }
    ///Container type for the return parameters of the
    /// [`getGrowthInsideTick(bytes32,int24)`](getGrowthInsideTickCall)
    /// function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getGrowthInsideTickReturn {
        pub _0: alloy::sol_types::private::U256
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (PoolId, alloy::sol_types::sol_data::Int<24>);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <PoolId as alloy::sol_types::SolType>::RustType,
                <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getGrowthInsideTickCall> for UnderlyingRustTuple<'_> {
                fn from(value: getGrowthInsideTickCall) -> Self {
                    (value.id, value.tick)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getGrowthInsideTickCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { id: tuple.0, tick: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getGrowthInsideTickReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getGrowthInsideTickReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getGrowthInsideTickReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getGrowthInsideTickCall {
            type Parameters<'a> = (PoolId, alloy::sol_types::sol_data::Int<24>);
            type Return = getGrowthInsideTickReturn;
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [53u8, 232u8, 28u8, 112u8];
            const SIGNATURE: &'static str = "getGrowthInsideTick(bytes32,int24)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <PoolId as alloy_sol_types::SolType>::tokenize(&self.id),
                    <alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tick
                    )
                )
            }

            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `reward(bytes)` and selector `0x6bc8334f`.
    ```solidity
    function reward(bytes memory data) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct rewardCall {
        pub data: alloy::sol_types::private::Bytes
    }
    ///Container type for the return parameters of the
    /// [`reward(bytes)`](rewardCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct rewardReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rewardCall> for UnderlyingRustTuple<'_> {
                fn from(value: rewardCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for rewardCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rewardReturn> for UnderlyingRustTuple<'_> {
                fn from(value: rewardReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for rewardReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for rewardCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Return = rewardReturn;
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type ReturnTuple<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [107u8, 200u8, 51u8, 79u8];
            const SIGNATURE: &'static str = "reward(bytes)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                    &self.data
                ),)
            }

            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockRewardsManager`](self) function calls.
    pub enum MockRewardsManagerCalls {
        afterRemoveLiquidity(afterRemoveLiquidityCall),
        beforeAddLiquidity(beforeAddLiquidityCall),
        consts(constsCall),
        getGrowthInsideRange(getGrowthInsideRangeCall),
        getGrowthInsideTick(getGrowthInsideTickCall),
        reward(rewardCall)
    }
    #[automatically_derived]
    impl MockRewardsManagerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the
        /// variants. No guarantees are made about the order of the
        /// selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [37u8, 153u8, 130u8, 229u8],
            [53u8, 232u8, 28u8, 112u8],
            [98u8, 136u8, 157u8, 214u8],
            [107u8, 200u8, 51u8, 79u8],
            [141u8, 178u8, 182u8, 82u8],
            [216u8, 109u8, 116u8, 78u8]
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockRewardsManagerCalls {
        const COUNT: usize = 6usize;
        const MIN_DATA_LENGTH: usize = 0usize;
        const NAME: &'static str = "MockRewardsManagerCalls";

        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::afterRemoveLiquidity(_) => {
                    <afterRemoveLiquidityCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::beforeAddLiquidity(_) => {
                    <beforeAddLiquidityCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::consts(_) => <constsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::getGrowthInsideRange(_) => {
                    <getGrowthInsideRangeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getGrowthInsideTick(_) => {
                    <getGrowthInsideTickCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::reward(_) => <rewardCall as alloy_sol_types::SolCall>::SELECTOR
            }
        }

        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }

        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }

        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool
            )
                -> alloy_sol_types::Result<MockRewardsManagerCalls>] = &[
                {
                    fn beforeAddLiquidity(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<MockRewardsManagerCalls> {
                        <beforeAddLiquidityCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate
                        )
                        .map(MockRewardsManagerCalls::beforeAddLiquidity)
                    }
                    beforeAddLiquidity
                },
                {
                    fn getGrowthInsideTick(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<MockRewardsManagerCalls> {
                        <getGrowthInsideTickCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate
                        )
                        .map(MockRewardsManagerCalls::getGrowthInsideTick)
                    }
                    getGrowthInsideTick
                },
                {
                    fn getGrowthInsideRange(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<MockRewardsManagerCalls> {
                        <getGrowthInsideRangeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate
                        )
                        .map(MockRewardsManagerCalls::getGrowthInsideRange)
                    }
                    getGrowthInsideRange
                },
                {
                    fn reward(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<MockRewardsManagerCalls> {
                        <rewardCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(MockRewardsManagerCalls::reward)
                    }
                    reward
                },
                {
                    fn afterRemoveLiquidity(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<MockRewardsManagerCalls> {
                        <afterRemoveLiquidityCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate
                        )
                        .map(MockRewardsManagerCalls::afterRemoveLiquidity)
                    }
                    afterRemoveLiquidity
                },
                {
                    fn consts(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<MockRewardsManagerCalls> {
                        <constsCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(MockRewardsManagerCalls::consts)
                    }
                    consts
                }
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }

        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::afterRemoveLiquidity(inner) => {
                    <afterRemoveLiquidityCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::beforeAddLiquidity(inner) => {
                    <beforeAddLiquidityCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::consts(inner) => {
                    <constsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getGrowthInsideRange(inner) => {
                    <getGrowthInsideRangeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getGrowthInsideTick(inner) => {
                    <getGrowthInsideTickCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::reward(inner) => {
                    <rewardCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }

        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::afterRemoveLiquidity(inner) => {
                    <afterRemoveLiquidityCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner, out
                    )
                }
                Self::beforeAddLiquidity(inner) => {
                    <beforeAddLiquidityCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::consts(inner) => {
                    <constsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::getGrowthInsideRange(inner) => {
                    <getGrowthInsideRangeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner, out
                    )
                }
                Self::getGrowthInsideTick(inner) => {
                    <getGrowthInsideTickCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner, out
                    )
                }
                Self::reward(inner) => {
                    <rewardCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`MockRewardsManager`](self) custom errors.
    pub enum MockRewardsManagerErrors {
        AssetsOutOfOrderOrNotUnique(AssetsOutOfOrderOrNotUnique),
        MissingHookPermissions(MissingHookPermissions),
        NotUniswap(NotUniswap),
        OutOfBoundRead(OutOfBoundRead),
        ReaderNotAtEnd(ReaderNotAtEnd),
        WrongEndLiquidity(WrongEndLiquidity)
    }
    #[automatically_derived]
    impl MockRewardsManagerErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the
        /// variants. No guarantees are made about the order of the
        /// selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 132u8, 47u8, 140u8],
            [100u8, 41u8, 207u8, 210u8],
            [117u8, 56u8, 50u8, 40u8],
            [128u8, 241u8, 26u8, 207u8],
            [188u8, 95u8, 153u8, 124u8],
            [248u8, 50u8, 134u8, 20u8]
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockRewardsManagerErrors {
        const COUNT: usize = 6usize;
        const MIN_DATA_LENGTH: usize = 0usize;
        const NAME: &'static str = "MockRewardsManagerErrors";

        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AssetsOutOfOrderOrNotUnique(_) => {
                    <AssetsOutOfOrderOrNotUnique as alloy_sol_types::SolError>::SELECTOR
                }
                Self::MissingHookPermissions(_) => {
                    <MissingHookPermissions as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotUniswap(_) => <NotUniswap as alloy_sol_types::SolError>::SELECTOR,
                Self::OutOfBoundRead(_) => <OutOfBoundRead as alloy_sol_types::SolError>::SELECTOR,
                Self::ReaderNotAtEnd(_) => <ReaderNotAtEnd as alloy_sol_types::SolError>::SELECTOR,
                Self::WrongEndLiquidity(_) => {
                    <WrongEndLiquidity as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }

        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }

        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }

        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool
            )
                -> alloy_sol_types::Result<MockRewardsManagerErrors>] = &[
                {
                    fn ReaderNotAtEnd(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<MockRewardsManagerErrors> {
                        <ReaderNotAtEnd as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate
                        )
                        .map(MockRewardsManagerErrors::ReaderNotAtEnd)
                    }
                    ReaderNotAtEnd
                },
                {
                    fn WrongEndLiquidity(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<MockRewardsManagerErrors> {
                        <WrongEndLiquidity as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate
                        )
                        .map(MockRewardsManagerErrors::WrongEndLiquidity)
                    }
                    WrongEndLiquidity
                },
                {
                    fn MissingHookPermissions(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<MockRewardsManagerErrors> {
                        <MissingHookPermissions as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate
                        )
                        .map(MockRewardsManagerErrors::MissingHookPermissions)
                    }
                    MissingHookPermissions
                },
                {
                    fn AssetsOutOfOrderOrNotUnique(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<MockRewardsManagerErrors> {
                        <AssetsOutOfOrderOrNotUnique as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate
                        )
                        .map(MockRewardsManagerErrors::AssetsOutOfOrderOrNotUnique)
                    }
                    AssetsOutOfOrderOrNotUnique
                },
                {
                    fn OutOfBoundRead(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<MockRewardsManagerErrors> {
                        <OutOfBoundRead as alloy_sol_types::SolError>::abi_decode_raw(
                            data, validate
                        )
                        .map(MockRewardsManagerErrors::OutOfBoundRead)
                    }
                    OutOfBoundRead
                },
                {
                    fn NotUniswap(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<MockRewardsManagerErrors> {
                        <NotUniswap as alloy_sol_types::SolError>::abi_decode_raw(data, validate)
                            .map(MockRewardsManagerErrors::NotUniswap)
                    }
                    NotUniswap
                }
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }

        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AssetsOutOfOrderOrNotUnique(inner) => {
                    <AssetsOutOfOrderOrNotUnique as alloy_sol_types::SolError>::abi_encoded_size(
                        inner
                    )
                }
                Self::MissingHookPermissions(inner) => {
                    <MissingHookPermissions as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::NotUniswap(inner) => {
                    <NotUniswap as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::OutOfBoundRead(inner) => {
                    <OutOfBoundRead as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ReaderNotAtEnd(inner) => {
                    <ReaderNotAtEnd as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::WrongEndLiquidity(inner) => {
                    <WrongEndLiquidity as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }

        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AssetsOutOfOrderOrNotUnique(inner) => {
                    <AssetsOutOfOrderOrNotUnique as alloy_sol_types::SolError>::abi_encode_raw(
                        inner, out
                    )
                }
                Self::MissingHookPermissions(inner) => {
                    <MissingHookPermissions as alloy_sol_types::SolError>::abi_encode_raw(
                        inner, out
                    )
                }
                Self::NotUniswap(inner) => {
                    <NotUniswap as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::OutOfBoundRead(inner) => {
                    <OutOfBoundRead as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::ReaderNotAtEnd(inner) => {
                    <ReaderNotAtEnd as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::WrongEndLiquidity(inner) => {
                    <WrongEndLiquidity as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockRewardsManager`](self) contract instance.

    See the [wrapper's documentation](`MockRewardsManagerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network
    >(
        address: alloy_sol_types::private::Address,
        provider: P
    ) -> MockRewardsManagerInstance<T, P, N> {
        MockRewardsManagerInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network
    >(
        provider: P,
        uniV4PoolManager: alloy::sol_types::private::Address
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<MockRewardsManagerInstance<T, P, N>>>
    {
        MockRewardsManagerInstance::<T, P, N>::deploy(provider, uniV4PoolManager)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network
    >(
        provider: P,
        uniV4PoolManager: alloy::sol_types::private::Address
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        MockRewardsManagerInstance::<T, P, N>::deploy_builder(provider, uniV4PoolManager)
    }
    /**A [`MockRewardsManager`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`MockRewardsManager`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockRewardsManagerInstance<T, P, N = alloy_contract::private::Ethereum> {
        address:            alloy_sol_types::private::Address,
        provider:           P,
        _network_transport: ::core::marker::PhantomData<(N, T)>
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MockRewardsManagerInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockRewardsManagerInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network
        > MockRewardsManagerInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`MockRewardsManager`](self) contract instance.

        See the [wrapper's documentation](`MockRewardsManagerInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self { address, provider, _network_transport: ::core::marker::PhantomData }
        }

        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            uniV4PoolManager: alloy::sol_types::private::Address
        ) -> alloy_contract::Result<MockRewardsManagerInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, uniV4PoolManager);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }

        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            uniV4PoolManager: alloy::sol_types::private::Address
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(&constructorCall {
                        uniV4PoolManager
                    })[..]
                ]
                .concat()
                .into()
            )
        }

        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }

        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }

        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }

        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MockRewardsManagerInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned
        /// provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockRewardsManagerInstance<T, P, N> {
            MockRewardsManagerInstance {
                address:            self.address,
                provider:           ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network
        > MockRewardsManagerInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider
        /// and address.
        ///
        /// Note that the call can be any function call, not just those defined
        /// in this contract. Prefer using the other methods for
        /// building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }

        ///Creates a new call builder for the [`afterRemoveLiquidity`]
        /// function.
        pub fn afterRemoveLiquidity(
            &self,
            _0: alloy::sol_types::private::Address,
            _1: <PoolKey as alloy::sol_types::SolType>::RustType,
            _2: <ModifyLiquidityParams as alloy::sol_types::SolType>::RustType,
            _3: <BalanceDelta as alloy::sol_types::SolType>::RustType,
            _4: alloy::sol_types::private::Bytes
        ) -> alloy_contract::SolCallBuilder<T, &P, afterRemoveLiquidityCall, N> {
            self.call_builder(&afterRemoveLiquidityCall { _0, _1, _2, _3, _4 })
        }

        ///Creates a new call builder for the [`beforeAddLiquidity`] function.
        pub fn beforeAddLiquidity(
            &self,
            _0: alloy::sol_types::private::Address,
            _1: <PoolKey as alloy::sol_types::SolType>::RustType,
            _2: <ModifyLiquidityParams as alloy::sol_types::SolType>::RustType,
            _3: alloy::sol_types::private::Bytes
        ) -> alloy_contract::SolCallBuilder<T, &P, beforeAddLiquidityCall, N> {
            self.call_builder(&beforeAddLiquidityCall { _0, _1, _2, _3 })
        }

        ///Creates a new call builder for the [`consts`] function.
        pub fn consts(&self) -> alloy_contract::SolCallBuilder<T, &P, constsCall, N> {
            self.call_builder(&constsCall {})
        }

        ///Creates a new call builder for the [`getGrowthInsideRange`]
        /// function.
        pub fn getGrowthInsideRange(
            &self,
            id: <PoolId as alloy::sol_types::SolType>::RustType,
            lowerTick: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
            upperTick: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType
        ) -> alloy_contract::SolCallBuilder<T, &P, getGrowthInsideRangeCall, N> {
            self.call_builder(&getGrowthInsideRangeCall { id, lowerTick, upperTick })
        }

        ///Creates a new call builder for the [`getGrowthInsideTick`] function.
        pub fn getGrowthInsideTick(
            &self,
            id: <PoolId as alloy::sol_types::SolType>::RustType,
            tick: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType
        ) -> alloy_contract::SolCallBuilder<T, &P, getGrowthInsideTickCall, N> {
            self.call_builder(&getGrowthInsideTickCall { id, tick })
        }

        ///Creates a new call builder for the [`reward`] function.
        pub fn reward(
            &self,
            data: alloy::sol_types::private::Bytes
        ) -> alloy_contract::SolCallBuilder<T, &P, rewardCall, N> {
            self.call_builder(&rewardCall { data })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network
        > MockRewardsManagerInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider
        /// and address.
        ///
        /// Note that the type can be any event, not just those defined in this
        /// contract. Prefer using the other methods for building
        /// type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
