/**

Generated by the following Solidity interface...
```solidity
interface PoolGate {
    type BalanceDelta is int256;

    error CallFailed(bytes);
    error Overflow();

    constructor(address uniV4);

    function __addLiquidity(address asset0, address asset1, int24 tickLower, int24 tickUpper, uint256 liquidity) external returns (BalanceDelta callerDelta, BalanceDelta feeDelta);
    function __initializePool(address asset0, address asset1, uint160 initialSqrtPriceX96) external returns (int24 tick);
    function __mint(address to, address asset, uint256 amount) external;
    function addLiquidity(address asset0, address asset1, int24 tickLower, int24 tickUpper, uint256 liquidity) external returns (uint256 amount0, uint256 amount1);
    function hook() external view returns (address);
    function initializePool(address asset0, address asset1, uint160 initialSqrtPriceX96) external returns (int24 tick);
    function isInitialized(address asset0, address asset1) external view returns (bool);
    function mint(address asset, uint256 amount) external;
    function mint(address to, address asset, uint256 amount) external;
    function setHook(address hook_) external;
    function unlockCallback(bytes memory data) external returns (bytes memory);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "uniV4",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "__addLiquidity",
    "inputs": [
      {
        "name": "asset0",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "asset1",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tickLower",
        "type": "int24",
        "internalType": "int24"
      },
      {
        "name": "tickUpper",
        "type": "int24",
        "internalType": "int24"
      },
      {
        "name": "liquidity",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "callerDelta",
        "type": "int256",
        "internalType": "BalanceDelta"
      },
      {
        "name": "feeDelta",
        "type": "int256",
        "internalType": "BalanceDelta"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "__initializePool",
    "inputs": [
      {
        "name": "asset0",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "asset1",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "initialSqrtPriceX96",
        "type": "uint160",
        "internalType": "uint160"
      }
    ],
    "outputs": [
      {
        "name": "tick",
        "type": "int24",
        "internalType": "int24"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "__mint",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "asset",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addLiquidity",
    "inputs": [
      {
        "name": "asset0",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "asset1",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tickLower",
        "type": "int24",
        "internalType": "int24"
      },
      {
        "name": "tickUpper",
        "type": "int24",
        "internalType": "int24"
      },
      {
        "name": "liquidity",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "amount0",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "amount1",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hook",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initializePool",
    "inputs": [
      {
        "name": "asset0",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "asset1",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "initialSqrtPriceX96",
        "type": "uint160",
        "internalType": "uint160"
      }
    ],
    "outputs": [
      {
        "name": "tick",
        "type": "int24",
        "internalType": "int24"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isInitialized",
    "inputs": [
      {
        "name": "asset0",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "asset1",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "mint",
    "inputs": [
      {
        "name": "asset",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "mint",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "asset",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setHook",
    "inputs": [
      {
        "name": "hook_",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "unlockCallback",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "error",
    "name": "CallFailed",
    "inputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ]
  },
  {
    "type": "error",
    "name": "Overflow",
    "inputs": []
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod PoolGate {
    use alloy::sol_types as alloy_sol_types;

    use super::*;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a034609957601f6113f138819003918201601f19168301916001600160401b03831184841017609d57808492602094604052833981010312609957516001600160a01b0381169081900360995760805260405161133f90816100b282396080518181816101f801528181610442015281816105ed015281816108f901528181610a4601528181610c3e015281816110ef01526111c30152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f803560e01c806330315f6214610b6d5780633dfd387314610af557806340c10f1914610ab157806347c7c5a91461096457806347ddb81f146108685780637f5a7c7b1461081857806391dd73461461070c578063a6c5524e1461051a578063c6c3bbe614610501578063cf618a55146104195763e73539fb14610093575f80fd5b34610416576100a136610dbd565b9391906100c6848473ffffffffffffffffffffffffffffffffffffffff895416611134565b946040516080810181811067ffffffffffffffff8211176103e9576040526020810191604082019389855260608301958a875260020b835260020b83527f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81116103c15783526101aa604051977f5a6bcfda000000000000000000000000000000000000000000000000000000008952600489019073ffffffffffffffffffffffffffffffffffffffff6080809282815116855282602082015116602086015262ffffff6040820151166040860152606081015160020b6060860152015116910152565b5160020b60a48701525160020b60c48601525160e48501525161010484015261014061012484015283610144840152604083610164818773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af19182156103b6578493859361037f575b508260801d600f0b1580610374575b15610316578360801d948086600f0b13159081610308575b50156102aa5761028161029e926fffffffffffffffffffffffffffffffff61027a604098611013565b169061119f565b6fffffffffffffffffffffffffffffffff61027a85600f0b611013565b82519182526020820152f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f526563656976696e67206d6f6e657920666f72204c5027696e673f00000000006044820152fd5b905084600f0b13155f610251565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f47657474696e6720666565733f000000000000000000000000000000000000006044820152fd5b5082600f0b15610239565b9092506103a591935060403d6040116103af575b61039d8183610f06565b810190610ffd565b929092915f61022a565b503d610393565b6040513d86823e3d90fd5b6004897f35278d12000000000000000000000000000000000000000000000000000000008152fd5b6024897f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b80fd5b50346104fd5761042836610e4b565b90929173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b156104fd5773ffffffffffffffffffffffffffffffffffffffff60645f928360405195869485937f156e29f60000000000000000000000000000000000000000000000000000000085521660048401528960248401528760448401525af180156104f2576104dc575b506104d9919261119f565b80f35b6104d992505f6104eb91610f06565b5f916104ce565b6040513d5f823e3d90fd5b5f80fd5b346104fd5761051861051236610e4b565b9161106f565b005b346104fd576105d35f73ffffffffffffffffffffffffffffffffffffffff61054136610dbd565b9394909281604051967fe73539fb00000000000000000000000000000000000000000000000000000000602089015216602487015216604485015260020b606484015260020b608483015260a482015260a481526105a060c482610f06565b604051809381927f48c8949100000000000000000000000000000000000000000000000000000000835260048301610d75565b03818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156104f257610630915f916106ea575b5060208082518301019101610ffd565b508060801d905f82600f0b1315806106dd575b1561067f576fffffffffffffffffffffffffffffffff61067281610668604095611013565b1692600f0b611013565b1682519182526020820152f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f416d6f756e7420706f7369746976653f000000000000000000000000000000006044820152fd5b505f81600f0b1315610643565b61070691503d805f833e6106fe8183610f06565b810190610f9a565b82610620565b346104fd5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104fd5760043567ffffffffffffffff81116104fd57366023820112156104fd5780600401359067ffffffffffffffff82116104fd5736602483830101116104fd575f6024819284806040519384930183378101838152039082305af13d15610810573d906107a582610f60565b916107b36040519384610f06565b82523d5f602084013e5b156107d6576107d29060405191829182610d75565b0390f35b61080c906040519182917fa5fa8d2b00000000000000000000000000000000000000000000000000000000835260048301610d75565b0390fd5b6060906107bd565b346104fd575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104fd57602073ffffffffffffffffffffffffffffffffffffffff5f5416604051908152f35b346104fd576108df5f73ffffffffffffffffffffffffffffffffffffffff8061089036610ce6565b91939081604051957f47c7c5a9000000000000000000000000000000000000000000000000000000006020880152166024860152166044840152166064820152606481526105a0608482610f06565b03818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af19081156104f25760209161093f915f9161094a575b50828082518301019101610f47565b6040519060020b8152f35b61095e91503d805f833e6106fe8183610f06565b83610930565b346104fd5761099573ffffffffffffffffffffffffffffffffffffffff61098a36610ce6565b9391835f5416611134565b91610a14604051937f695c5bf5000000000000000000000000000000000000000000000000000000008552600485019073ffffffffffffffffffffffffffffffffffffffff6080809282815116855282602082015116602086015262ffffff6040820151166040860152606081015160020b6060860152015116910152565b1660a482015260e060c48201525f60e4820152602081610104815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156104f2576020915f91610a84575b506040519060020b8152f35b610aa49150823d8411610aaa575b610a9c8183610f06565b810190610f47565b82610a78565b503d610a92565b346104fd5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104fd57610518610aeb610cc3565b602435903361106f565b346104fd5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104fd5773ffffffffffffffffffffffffffffffffffffffff610b41610cc3565b167fffffffffffffffffffffffff00000000000000000000000000000000000000005f5416175f555f80f35b346104fd5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104fd57610ba4610cc3565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036104fd5760a091610be99173ffffffffffffffffffffffffffffffffffffffff5f5416611134565b205f52600660205260405f20604051907f1e2eaeaf000000000000000000000000000000000000000000000000000000008252600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa80156104f2575f90610c90575b6020906040519073ffffffffffffffffffffffffffffffffffffffff1615158152f35b506020813d602011610cbb575b81610caa60209383610f06565b810103126104fd5760209051610c6d565b3d9150610c9d565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036104fd57565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60609101126104fd5760043573ffffffffffffffffffffffffffffffffffffffff811681036104fd579060243573ffffffffffffffffffffffffffffffffffffffff811681036104fd579060443573ffffffffffffffffffffffffffffffffffffffff811681036104fd5790565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602060409481855280519182918282880152018686015e5f8582860101520116010190565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60a09101126104fd5760043573ffffffffffffffffffffffffffffffffffffffff811681036104fd579060243573ffffffffffffffffffffffffffffffffffffffff811681036104fd57906044358060020b81036104fd57906064358060020b81036104fd579060843590565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60609101126104fd5760043573ffffffffffffffffffffffffffffffffffffffff811681036104fd579060243573ffffffffffffffffffffffffffffffffffffffff811681036104fd579060443590565b60a0810190811067ffffffffffffffff821117610ed957604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610ed957604052565b908160209103126104fd57518060020b81036104fd5790565b67ffffffffffffffff8111610ed957601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6020818303126104fd5780519067ffffffffffffffff82116104fd570181601f820112156104fd57805190610fce82610f60565b92610fdc6040519485610f06565b828452602083830101116104fd57815f9260208093018386015e8301015290565b91908260409103126104fd576020825192015190565b600f0b7fffffffffffffffffffffffffffffffff800000000000000000000000000000008114611042575f0390565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b6110d59273ffffffffffffffffffffffffffffffffffffffff5f9381604051947fcf618a550000000000000000000000000000000000000000000000000000000060208701521660248501521660448301526064820152606481526105a0608482610f06565b03818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156104f25761111e5750565b611131903d805f833e6106fe8183610f06565b50565b73ffffffffffffffffffffffffffffffffffffffff8092935f608060405161115b81610ebd565b8281528260208201528260408201528260608201520152816040519561118087610ebd565b1685521660208401525f6040840152603c606084015216608082015290565b5f91806111ab57505050565b73ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016921690823b156104fd576040517fa58411940000000000000000000000000000000000000000000000000000000081528260048201525f8160248183885af180156104f25761131d575b50813b156113195783916044839260405194859384927f40c10f1900000000000000000000000000000000000000000000000000000000845288600485015260248401525af1801561130e579083916112f5575b50906020906004604051809481937f11da60b40000000000000000000000000000000000000000000000000000000083525af180156112ea576112c2575050565b602090813d83116112e3575b6112d88183610f06565b810103126104165750565b503d6112ce565b6040513d84823e3d90fd5b816112ff91610f06565b61130a57815f611281565b5080fd5b6040513d85823e3d90fd5b8380fd5b61132a9194505f90610f06565b5f925f61122d56fea164736f6c634300081a000a
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA04`\x99W`\x1Fa\x13\xF18\x81\x90\x03\x91\x82\x01`\x1F\x19\x16\x83\x01\x91`\x01`\x01`@\x1B\x03\x83\x11\x84\x84\x10\x17`\x9DW\x80\x84\x92` \x94`@R\x839\x81\x01\x03\x12`\x99WQ`\x01`\x01`\xA0\x1B\x03\x81\x16\x90\x81\x90\x03`\x99W`\x80R`@Qa\x13?\x90\x81a\0\xB2\x829`\x80Q\x81\x81\x81a\x01\xF8\x01R\x81\x81a\x04B\x01R\x81\x81a\x05\xED\x01R\x81\x81a\x08\xF9\x01R\x81\x81a\nF\x01R\x81\x81a\x0C>\x01R\x81\x81a\x10\xEF\x01Ra\x11\xC3\x01R\xF3[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_\x805`\xE0\x1C\x80c01_b\x14a\x0BmW\x80c=\xFD8s\x14a\n\xF5W\x80c@\xC1\x0F\x19\x14a\n\xB1W\x80cG\xC7\xC5\xA9\x14a\tdW\x80cG\xDD\xB8\x1F\x14a\x08hW\x80c\x7FZ|{\x14a\x08\x18W\x80c\x91\xDDsF\x14a\x07\x0CW\x80c\xA6\xC5RN\x14a\x05\x1AW\x80c\xC6\xC3\xBB\xE6\x14a\x05\x01W\x80c\xCFa\x8AU\x14a\x04\x19Wc\xE759\xFB\x14a\0\x93W_\x80\xFD[4a\x04\x16Wa\0\xA16a\r\xBDV[\x93\x91\x90a\0\xC6\x84\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89T\x16a\x114V[\x94`@Q`\x80\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03\xE9W`@R` \x81\x01\x91`@\x82\x01\x93\x89\x85R``\x83\x01\x95\x8A\x87R`\x02\x0B\x83R`\x02\x0B\x83R\x7F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xC1W\x83Ra\x01\xAA`@Q\x97\x7FZk\xCF\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x89R`\x04\x89\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x80\x80\x92\x82\x81Q\x16\x85R\x82` \x82\x01Q\x16` \x86\x01Rb\xFF\xFF\xFF`@\x82\x01Q\x16`@\x86\x01R``\x81\x01Q`\x02\x0B``\x86\x01R\x01Q\x16\x91\x01RV[Q`\x02\x0B`\xA4\x87\x01RQ`\x02\x0B`\xC4\x86\x01RQ`\xE4\x85\x01RQa\x01\x04\x84\x01Ra\x01@a\x01$\x84\x01R\x83a\x01D\x84\x01R`@\x83a\x01d\x81\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x91\x82\x15a\x03\xB6W\x84\x93\x85\x93a\x03\x7FW[P\x82`\x80\x1D`\x0F\x0B\x15\x80a\x03tW[\x15a\x03\x16W\x83`\x80\x1D\x94\x80\x86`\x0F\x0B\x13\x15\x90\x81a\x03\x08W[P\x15a\x02\xAAWa\x02\x81a\x02\x9E\x92o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x02z`@\x98a\x10\x13V[\x16\x90a\x11\x9FV[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x02z\x85`\x0F\x0Ba\x10\x13V[\x82Q\x91\x82R` \x82\x01R\xF3[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FReceiving money for LP'ing?\0\0\0\0\0`D\x82\x01R\xFD[\x90P\x84`\x0F\x0B\x13\x15_a\x02QV[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FGetting fees?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[P\x82`\x0F\x0B\x15a\x029V[\x90\x92Pa\x03\xA5\x91\x93P`@=`@\x11a\x03\xAFW[a\x03\x9D\x81\x83a\x0F\x06V[\x81\x01\x90a\x0F\xFDV[\x92\x90\x92\x91_a\x02*V[P=a\x03\x93V[`@Q=\x86\x82>=\x90\xFD[`\x04\x89\x7F5'\x8D\x12\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xFD[`$\x89\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`A`\x04R\xFD[\x80\xFD[P4a\x04\xFDWa\x04(6a\x0EKV[\x90\x92\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90\x81;\x15a\x04\xFDWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`d_\x92\x83`@Q\x95\x86\x94\x85\x93\x7F\x15n)\xF6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R\x16`\x04\x84\x01R\x89`$\x84\x01R\x87`D\x84\x01RZ\xF1\x80\x15a\x04\xF2Wa\x04\xDCW[Pa\x04\xD9\x91\x92a\x11\x9FV[\x80\xF3[a\x04\xD9\x92P_a\x04\xEB\x91a\x0F\x06V[_\x91a\x04\xCEV[`@Q=_\x82>=\x90\xFD[_\x80\xFD[4a\x04\xFDWa\x05\x18a\x05\x126a\x0EKV[\x91a\x10oV[\0[4a\x04\xFDWa\x05\xD3_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x05A6a\r\xBDV[\x93\x94\x90\x92\x81`@Q\x96\x7F\xE759\xFB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x89\x01R\x16`$\x87\x01R\x16`D\x85\x01R`\x02\x0B`d\x84\x01R`\x02\x0B`\x84\x83\x01R`\xA4\x82\x01R`\xA4\x81Ra\x05\xA0`\xC4\x82a\x0F\x06V[`@Q\x80\x93\x81\x92\x7FH\xC8\x94\x91\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`\x04\x83\x01a\ruV[\x03\x81\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x80\x15a\x04\xF2Wa\x060\x91_\x91a\x06\xEAW[P` \x80\x82Q\x83\x01\x01\x91\x01a\x0F\xFDV[P\x80`\x80\x1D\x90_\x82`\x0F\x0B\x13\x15\x80a\x06\xDDW[\x15a\x06\x7FWo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x06r\x81a\x06h`@\x95a\x10\x13V[\x16\x92`\x0F\x0Ba\x10\x13V[\x16\x82Q\x91\x82R` \x82\x01R\xF3[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x10`$\x82\x01R\x7FAmount positive?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[P_\x81`\x0F\x0B\x13\x15a\x06CV[a\x07\x06\x91P=\x80_\x83>a\x06\xFE\x81\x83a\x0F\x06V[\x81\x01\x90a\x0F\x9AV[\x82a\x06 V[4a\x04\xFDW` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x04\xFDW`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\xFDW6`#\x82\x01\x12\x15a\x04\xFDW\x80`\x04\x015\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x04\xFDW6`$\x83\x83\x01\x01\x11a\x04\xFDW_`$\x81\x92\x84\x80`@Q\x93\x84\x93\x01\x837\x81\x01\x83\x81R\x03\x90\x820Z\xF1=\x15a\x08\x10W=\x90a\x07\xA5\x82a\x0F`V[\x91a\x07\xB3`@Q\x93\x84a\x0F\x06V[\x82R=_` \x84\x01>[\x15a\x07\xD6Wa\x07\xD2\x90`@Q\x91\x82\x91\x82a\ruV[\x03\x90\xF3[a\x08\x0C\x90`@Q\x91\x82\x91\x7F\xA5\xFA\x8D+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`\x04\x83\x01a\ruV[\x03\x90\xFD[``\x90a\x07\xBDV[4a\x04\xFDW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x04\xFDW` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF_T\x16`@Q\x90\x81R\xF3[4a\x04\xFDWa\x08\xDF_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80a\x08\x906a\x0C\xE6V[\x91\x93\x90\x81`@Q\x95\x7FG\xC7\xC5\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x88\x01R\x16`$\x86\x01R\x16`D\x84\x01R\x16`d\x82\x01R`d\x81Ra\x05\xA0`\x84\x82a\x0F\x06V[\x03\x81\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x90\x81\x15a\x04\xF2W` \x91a\t?\x91_\x91a\tJW[P\x82\x80\x82Q\x83\x01\x01\x91\x01a\x0FGV[`@Q\x90`\x02\x0B\x81R\xF3[a\t^\x91P=\x80_\x83>a\x06\xFE\x81\x83a\x0F\x06V[\x83a\t0V[4a\x04\xFDWa\t\x95s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\t\x8A6a\x0C\xE6V[\x93\x91\x83_T\x16a\x114V[\x91a\n\x14`@Q\x93\x7Fi\\[\xF5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R`\x04\x85\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x80\x80\x92\x82\x81Q\x16\x85R\x82` \x82\x01Q\x16` \x86\x01Rb\xFF\xFF\xFF`@\x82\x01Q\x16`@\x86\x01R``\x81\x01Q`\x02\x0B``\x86\x01R\x01Q\x16\x91\x01RV[\x16`\xA4\x82\x01R`\xE0`\xC4\x82\x01R_`\xE4\x82\x01R` \x81a\x01\x04\x81_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x80\x15a\x04\xF2W` \x91_\x91a\n\x84W[P`@Q\x90`\x02\x0B\x81R\xF3[a\n\xA4\x91P\x82=\x84\x11a\n\xAAW[a\n\x9C\x81\x83a\x0F\x06V[\x81\x01\x90a\x0FGV[\x82a\nxV[P=a\n\x92V[4a\x04\xFDW`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x04\xFDWa\x05\x18a\n\xEBa\x0C\xC3V[`$5\x903a\x10oV[4a\x04\xFDW` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x04\xFDWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x0BAa\x0C\xC3V[\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_T\x16\x17_U_\x80\xF3[4a\x04\xFDW`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x04\xFDWa\x0B\xA4a\x0C\xC3V[`$5\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x04\xFDW`\xA0\x91a\x0B\xE9\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF_T\x16a\x114V[ _R`\x06` R`@_ `@Q\x90\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R`\x04\x82\x01R` \x81`$\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xFA\x80\x15a\x04\xF2W_\x90a\x0C\x90W[` \x90`@Q\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15\x15\x81R\xF3[P` \x81=` \x11a\x0C\xBBW[\x81a\x0C\xAA` \x93\x83a\x0F\x06V[\x81\x01\x03\x12a\x04\xFDW` \x90Qa\x0CmV[=\x91Pa\x0C\x9DV[`\x045\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x04\xFDWV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC``\x91\x01\x12a\x04\xFDW`\x045s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x04\xFDW\x90`$5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x04\xFDW\x90`D5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x04\xFDW\x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` `@\x94\x81\x85R\x80Q\x91\x82\x91\x82\x82\x88\x01R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC`\xA0\x91\x01\x12a\x04\xFDW`\x045s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x04\xFDW\x90`$5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x04\xFDW\x90`D5\x80`\x02\x0B\x81\x03a\x04\xFDW\x90`d5\x80`\x02\x0B\x81\x03a\x04\xFDW\x90`\x845\x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC``\x91\x01\x12a\x04\xFDW`\x045s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x04\xFDW\x90`$5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x04\xFDW\x90`D5\x90V[`\xA0\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0E\xD9W`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0E\xD9W`@RV[\x90\x81` \x91\x03\x12a\x04\xFDWQ\x80`\x02\x0B\x81\x03a\x04\xFDW\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0E\xD9W`\x1F\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16` \x01\x90V[` \x81\x83\x03\x12a\x04\xFDW\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x04\xFDW\x01\x81`\x1F\x82\x01\x12\x15a\x04\xFDW\x80Q\x90a\x0F\xCE\x82a\x0F`V[\x92a\x0F\xDC`@Q\x94\x85a\x0F\x06V[\x82\x84R` \x83\x83\x01\x01\x11a\x04\xFDW\x81_\x92` \x80\x93\x01\x83\x86\x01^\x83\x01\x01R\x90V[\x91\x90\x82`@\x91\x03\x12a\x04\xFDW` \x82Q\x92\x01Q\x90V[`\x0F\x0B\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x14a\x10BW_\x03\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[a\x10\xD5\x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF_\x93\x81`@Q\x94\x7F\xCFa\x8AU\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x87\x01R\x16`$\x85\x01R\x16`D\x83\x01R`d\x82\x01R`d\x81Ra\x05\xA0`\x84\x82a\x0F\x06V[\x03\x81\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x80\x15a\x04\xF2Wa\x11\x1EWPV[a\x111\x90=\x80_\x83>a\x06\xFE\x81\x83a\x0F\x06V[PV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x92\x93_`\x80`@Qa\x11[\x81a\x0E\xBDV[\x82\x81R\x82` \x82\x01R\x82`@\x82\x01R\x82``\x82\x01R\x01R\x81`@Q\x95a\x11\x80\x87a\x0E\xBDV[\x16\x85R\x16` \x84\x01R_`@\x84\x01R`<``\x84\x01R\x16`\x80\x82\x01R\x90V[_\x91\x80a\x11\xABWPPPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x92\x16\x90\x82;\x15a\x04\xFDW`@Q\x7F\xA5\x84\x11\x94\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x82`\x04\x82\x01R_\x81`$\x81\x83\x88Z\xF1\x80\x15a\x04\xF2Wa\x13\x1DW[P\x81;\x15a\x13\x19W\x83\x91`D\x83\x92`@Q\x94\x85\x93\x84\x92\x7F@\xC1\x0F\x19\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R\x88`\x04\x85\x01R`$\x84\x01RZ\xF1\x80\x15a\x13\x0EW\x90\x83\x91a\x12\xF5W[P\x90` \x90`\x04`@Q\x80\x94\x81\x93\x7F\x11\xDA`\xB4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83RZ\xF1\x80\x15a\x12\xEAWa\x12\xC2WPPV[` \x90\x81=\x83\x11a\x12\xE3W[a\x12\xD8\x81\x83a\x0F\x06V[\x81\x01\x03\x12a\x04\x16WPV[P=a\x12\xCEV[`@Q=\x84\x82>=\x90\xFD[\x81a\x12\xFF\x91a\x0F\x06V[a\x13\nW\x81_a\x12\x81V[P\x80\xFD[`@Q=\x85\x82>=\x90\xFD[\x83\x80\xFD[a\x13*\x91\x94P_\x90a\x0F\x06V[_\x92_a\x12-V\xFE\xA1dsolcC\0\x08\x1A\0\n",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610011575f80fd5b5f803560e01c806330315f6214610b6d5780633dfd387314610af557806340c10f1914610ab157806347c7c5a91461096457806347ddb81f146108685780637f5a7c7b1461081857806391dd73461461070c578063a6c5524e1461051a578063c6c3bbe614610501578063cf618a55146104195763e73539fb14610093575f80fd5b34610416576100a136610dbd565b9391906100c6848473ffffffffffffffffffffffffffffffffffffffff895416611134565b946040516080810181811067ffffffffffffffff8211176103e9576040526020810191604082019389855260608301958a875260020b835260020b83527f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81116103c15783526101aa604051977f5a6bcfda000000000000000000000000000000000000000000000000000000008952600489019073ffffffffffffffffffffffffffffffffffffffff6080809282815116855282602082015116602086015262ffffff6040820151166040860152606081015160020b6060860152015116910152565b5160020b60a48701525160020b60c48601525160e48501525161010484015261014061012484015283610144840152604083610164818773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af19182156103b6578493859361037f575b508260801d600f0b1580610374575b15610316578360801d948086600f0b13159081610308575b50156102aa5761028161029e926fffffffffffffffffffffffffffffffff61027a604098611013565b169061119f565b6fffffffffffffffffffffffffffffffff61027a85600f0b611013565b82519182526020820152f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f526563656976696e67206d6f6e657920666f72204c5027696e673f00000000006044820152fd5b905084600f0b13155f610251565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f47657474696e6720666565733f000000000000000000000000000000000000006044820152fd5b5082600f0b15610239565b9092506103a591935060403d6040116103af575b61039d8183610f06565b810190610ffd565b929092915f61022a565b503d610393565b6040513d86823e3d90fd5b6004897f35278d12000000000000000000000000000000000000000000000000000000008152fd5b6024897f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b80fd5b50346104fd5761042836610e4b565b90929173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b156104fd5773ffffffffffffffffffffffffffffffffffffffff60645f928360405195869485937f156e29f60000000000000000000000000000000000000000000000000000000085521660048401528960248401528760448401525af180156104f2576104dc575b506104d9919261119f565b80f35b6104d992505f6104eb91610f06565b5f916104ce565b6040513d5f823e3d90fd5b5f80fd5b346104fd5761051861051236610e4b565b9161106f565b005b346104fd576105d35f73ffffffffffffffffffffffffffffffffffffffff61054136610dbd565b9394909281604051967fe73539fb00000000000000000000000000000000000000000000000000000000602089015216602487015216604485015260020b606484015260020b608483015260a482015260a481526105a060c482610f06565b604051809381927f48c8949100000000000000000000000000000000000000000000000000000000835260048301610d75565b03818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156104f257610630915f916106ea575b5060208082518301019101610ffd565b508060801d905f82600f0b1315806106dd575b1561067f576fffffffffffffffffffffffffffffffff61067281610668604095611013565b1692600f0b611013565b1682519182526020820152f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f416d6f756e7420706f7369746976653f000000000000000000000000000000006044820152fd5b505f81600f0b1315610643565b61070691503d805f833e6106fe8183610f06565b810190610f9a565b82610620565b346104fd5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104fd5760043567ffffffffffffffff81116104fd57366023820112156104fd5780600401359067ffffffffffffffff82116104fd5736602483830101116104fd575f6024819284806040519384930183378101838152039082305af13d15610810573d906107a582610f60565b916107b36040519384610f06565b82523d5f602084013e5b156107d6576107d29060405191829182610d75565b0390f35b61080c906040519182917fa5fa8d2b00000000000000000000000000000000000000000000000000000000835260048301610d75565b0390fd5b6060906107bd565b346104fd575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104fd57602073ffffffffffffffffffffffffffffffffffffffff5f5416604051908152f35b346104fd576108df5f73ffffffffffffffffffffffffffffffffffffffff8061089036610ce6565b91939081604051957f47c7c5a9000000000000000000000000000000000000000000000000000000006020880152166024860152166044840152166064820152606481526105a0608482610f06565b03818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af19081156104f25760209161093f915f9161094a575b50828082518301019101610f47565b6040519060020b8152f35b61095e91503d805f833e6106fe8183610f06565b83610930565b346104fd5761099573ffffffffffffffffffffffffffffffffffffffff61098a36610ce6565b9391835f5416611134565b91610a14604051937f695c5bf5000000000000000000000000000000000000000000000000000000008552600485019073ffffffffffffffffffffffffffffffffffffffff6080809282815116855282602082015116602086015262ffffff6040820151166040860152606081015160020b6060860152015116910152565b1660a482015260e060c48201525f60e4820152602081610104815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156104f2576020915f91610a84575b506040519060020b8152f35b610aa49150823d8411610aaa575b610a9c8183610f06565b810190610f47565b82610a78565b503d610a92565b346104fd5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104fd57610518610aeb610cc3565b602435903361106f565b346104fd5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104fd5773ffffffffffffffffffffffffffffffffffffffff610b41610cc3565b167fffffffffffffffffffffffff00000000000000000000000000000000000000005f5416175f555f80f35b346104fd5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104fd57610ba4610cc3565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036104fd5760a091610be99173ffffffffffffffffffffffffffffffffffffffff5f5416611134565b205f52600660205260405f20604051907f1e2eaeaf000000000000000000000000000000000000000000000000000000008252600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa80156104f2575f90610c90575b6020906040519073ffffffffffffffffffffffffffffffffffffffff1615158152f35b506020813d602011610cbb575b81610caa60209383610f06565b810103126104fd5760209051610c6d565b3d9150610c9d565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036104fd57565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60609101126104fd5760043573ffffffffffffffffffffffffffffffffffffffff811681036104fd579060243573ffffffffffffffffffffffffffffffffffffffff811681036104fd579060443573ffffffffffffffffffffffffffffffffffffffff811681036104fd5790565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602060409481855280519182918282880152018686015e5f8582860101520116010190565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60a09101126104fd5760043573ffffffffffffffffffffffffffffffffffffffff811681036104fd579060243573ffffffffffffffffffffffffffffffffffffffff811681036104fd57906044358060020b81036104fd57906064358060020b81036104fd579060843590565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60609101126104fd5760043573ffffffffffffffffffffffffffffffffffffffff811681036104fd579060243573ffffffffffffffffffffffffffffffffffffffff811681036104fd579060443590565b60a0810190811067ffffffffffffffff821117610ed957604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610ed957604052565b908160209103126104fd57518060020b81036104fd5790565b67ffffffffffffffff8111610ed957601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6020818303126104fd5780519067ffffffffffffffff82116104fd570181601f820112156104fd57805190610fce82610f60565b92610fdc6040519485610f06565b828452602083830101116104fd57815f9260208093018386015e8301015290565b91908260409103126104fd576020825192015190565b600f0b7fffffffffffffffffffffffffffffffff800000000000000000000000000000008114611042575f0390565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b6110d59273ffffffffffffffffffffffffffffffffffffffff5f9381604051947fcf618a550000000000000000000000000000000000000000000000000000000060208701521660248501521660448301526064820152606481526105a0608482610f06565b03818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156104f25761111e5750565b611131903d805f833e6106fe8183610f06565b50565b73ffffffffffffffffffffffffffffffffffffffff8092935f608060405161115b81610ebd565b8281528260208201528260408201528260608201520152816040519561118087610ebd565b1685521660208401525f6040840152603c606084015216608082015290565b5f91806111ab57505050565b73ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016921690823b156104fd576040517fa58411940000000000000000000000000000000000000000000000000000000081528260048201525f8160248183885af180156104f25761131d575b50813b156113195783916044839260405194859384927f40c10f1900000000000000000000000000000000000000000000000000000000845288600485015260248401525af1801561130e579083916112f5575b50906020906004604051809481937f11da60b40000000000000000000000000000000000000000000000000000000083525af180156112ea576112c2575050565b602090813d83116112e3575b6112d88183610f06565b810103126104165750565b503d6112ce565b6040513d84823e3d90fd5b816112ff91610f06565b61130a57815f611281565b5080fd5b6040513d85823e3d90fd5b8380fd5b61132a9194505f90610f06565b5f925f61122d56fea164736f6c634300081a000a
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_\x805`\xE0\x1C\x80c01_b\x14a\x0BmW\x80c=\xFD8s\x14a\n\xF5W\x80c@\xC1\x0F\x19\x14a\n\xB1W\x80cG\xC7\xC5\xA9\x14a\tdW\x80cG\xDD\xB8\x1F\x14a\x08hW\x80c\x7FZ|{\x14a\x08\x18W\x80c\x91\xDDsF\x14a\x07\x0CW\x80c\xA6\xC5RN\x14a\x05\x1AW\x80c\xC6\xC3\xBB\xE6\x14a\x05\x01W\x80c\xCFa\x8AU\x14a\x04\x19Wc\xE759\xFB\x14a\0\x93W_\x80\xFD[4a\x04\x16Wa\0\xA16a\r\xBDV[\x93\x91\x90a\0\xC6\x84\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89T\x16a\x114V[\x94`@Q`\x80\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03\xE9W`@R` \x81\x01\x91`@\x82\x01\x93\x89\x85R``\x83\x01\x95\x8A\x87R`\x02\x0B\x83R`\x02\x0B\x83R\x7F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xC1W\x83Ra\x01\xAA`@Q\x97\x7FZk\xCF\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x89R`\x04\x89\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x80\x80\x92\x82\x81Q\x16\x85R\x82` \x82\x01Q\x16` \x86\x01Rb\xFF\xFF\xFF`@\x82\x01Q\x16`@\x86\x01R``\x81\x01Q`\x02\x0B``\x86\x01R\x01Q\x16\x91\x01RV[Q`\x02\x0B`\xA4\x87\x01RQ`\x02\x0B`\xC4\x86\x01RQ`\xE4\x85\x01RQa\x01\x04\x84\x01Ra\x01@a\x01$\x84\x01R\x83a\x01D\x84\x01R`@\x83a\x01d\x81\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x91\x82\x15a\x03\xB6W\x84\x93\x85\x93a\x03\x7FW[P\x82`\x80\x1D`\x0F\x0B\x15\x80a\x03tW[\x15a\x03\x16W\x83`\x80\x1D\x94\x80\x86`\x0F\x0B\x13\x15\x90\x81a\x03\x08W[P\x15a\x02\xAAWa\x02\x81a\x02\x9E\x92o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x02z`@\x98a\x10\x13V[\x16\x90a\x11\x9FV[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x02z\x85`\x0F\x0Ba\x10\x13V[\x82Q\x91\x82R` \x82\x01R\xF3[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FReceiving money for LP'ing?\0\0\0\0\0`D\x82\x01R\xFD[\x90P\x84`\x0F\x0B\x13\x15_a\x02QV[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FGetting fees?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[P\x82`\x0F\x0B\x15a\x029V[\x90\x92Pa\x03\xA5\x91\x93P`@=`@\x11a\x03\xAFW[a\x03\x9D\x81\x83a\x0F\x06V[\x81\x01\x90a\x0F\xFDV[\x92\x90\x92\x91_a\x02*V[P=a\x03\x93V[`@Q=\x86\x82>=\x90\xFD[`\x04\x89\x7F5'\x8D\x12\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xFD[`$\x89\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`A`\x04R\xFD[\x80\xFD[P4a\x04\xFDWa\x04(6a\x0EKV[\x90\x92\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90\x81;\x15a\x04\xFDWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`d_\x92\x83`@Q\x95\x86\x94\x85\x93\x7F\x15n)\xF6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R\x16`\x04\x84\x01R\x89`$\x84\x01R\x87`D\x84\x01RZ\xF1\x80\x15a\x04\xF2Wa\x04\xDCW[Pa\x04\xD9\x91\x92a\x11\x9FV[\x80\xF3[a\x04\xD9\x92P_a\x04\xEB\x91a\x0F\x06V[_\x91a\x04\xCEV[`@Q=_\x82>=\x90\xFD[_\x80\xFD[4a\x04\xFDWa\x05\x18a\x05\x126a\x0EKV[\x91a\x10oV[\0[4a\x04\xFDWa\x05\xD3_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x05A6a\r\xBDV[\x93\x94\x90\x92\x81`@Q\x96\x7F\xE759\xFB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x89\x01R\x16`$\x87\x01R\x16`D\x85\x01R`\x02\x0B`d\x84\x01R`\x02\x0B`\x84\x83\x01R`\xA4\x82\x01R`\xA4\x81Ra\x05\xA0`\xC4\x82a\x0F\x06V[`@Q\x80\x93\x81\x92\x7FH\xC8\x94\x91\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`\x04\x83\x01a\ruV[\x03\x81\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x80\x15a\x04\xF2Wa\x060\x91_\x91a\x06\xEAW[P` \x80\x82Q\x83\x01\x01\x91\x01a\x0F\xFDV[P\x80`\x80\x1D\x90_\x82`\x0F\x0B\x13\x15\x80a\x06\xDDW[\x15a\x06\x7FWo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x06r\x81a\x06h`@\x95a\x10\x13V[\x16\x92`\x0F\x0Ba\x10\x13V[\x16\x82Q\x91\x82R` \x82\x01R\xF3[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x10`$\x82\x01R\x7FAmount positive?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[P_\x81`\x0F\x0B\x13\x15a\x06CV[a\x07\x06\x91P=\x80_\x83>a\x06\xFE\x81\x83a\x0F\x06V[\x81\x01\x90a\x0F\x9AV[\x82a\x06 V[4a\x04\xFDW` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x04\xFDW`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\xFDW6`#\x82\x01\x12\x15a\x04\xFDW\x80`\x04\x015\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x04\xFDW6`$\x83\x83\x01\x01\x11a\x04\xFDW_`$\x81\x92\x84\x80`@Q\x93\x84\x93\x01\x837\x81\x01\x83\x81R\x03\x90\x820Z\xF1=\x15a\x08\x10W=\x90a\x07\xA5\x82a\x0F`V[\x91a\x07\xB3`@Q\x93\x84a\x0F\x06V[\x82R=_` \x84\x01>[\x15a\x07\xD6Wa\x07\xD2\x90`@Q\x91\x82\x91\x82a\ruV[\x03\x90\xF3[a\x08\x0C\x90`@Q\x91\x82\x91\x7F\xA5\xFA\x8D+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`\x04\x83\x01a\ruV[\x03\x90\xFD[``\x90a\x07\xBDV[4a\x04\xFDW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x04\xFDW` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF_T\x16`@Q\x90\x81R\xF3[4a\x04\xFDWa\x08\xDF_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80a\x08\x906a\x0C\xE6V[\x91\x93\x90\x81`@Q\x95\x7FG\xC7\xC5\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x88\x01R\x16`$\x86\x01R\x16`D\x84\x01R\x16`d\x82\x01R`d\x81Ra\x05\xA0`\x84\x82a\x0F\x06V[\x03\x81\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x90\x81\x15a\x04\xF2W` \x91a\t?\x91_\x91a\tJW[P\x82\x80\x82Q\x83\x01\x01\x91\x01a\x0FGV[`@Q\x90`\x02\x0B\x81R\xF3[a\t^\x91P=\x80_\x83>a\x06\xFE\x81\x83a\x0F\x06V[\x83a\t0V[4a\x04\xFDWa\t\x95s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\t\x8A6a\x0C\xE6V[\x93\x91\x83_T\x16a\x114V[\x91a\n\x14`@Q\x93\x7Fi\\[\xF5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R`\x04\x85\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x80\x80\x92\x82\x81Q\x16\x85R\x82` \x82\x01Q\x16` \x86\x01Rb\xFF\xFF\xFF`@\x82\x01Q\x16`@\x86\x01R``\x81\x01Q`\x02\x0B``\x86\x01R\x01Q\x16\x91\x01RV[\x16`\xA4\x82\x01R`\xE0`\xC4\x82\x01R_`\xE4\x82\x01R` \x81a\x01\x04\x81_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x80\x15a\x04\xF2W` \x91_\x91a\n\x84W[P`@Q\x90`\x02\x0B\x81R\xF3[a\n\xA4\x91P\x82=\x84\x11a\n\xAAW[a\n\x9C\x81\x83a\x0F\x06V[\x81\x01\x90a\x0FGV[\x82a\nxV[P=a\n\x92V[4a\x04\xFDW`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x04\xFDWa\x05\x18a\n\xEBa\x0C\xC3V[`$5\x903a\x10oV[4a\x04\xFDW` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x04\xFDWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x0BAa\x0C\xC3V[\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_T\x16\x17_U_\x80\xF3[4a\x04\xFDW`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x04\xFDWa\x0B\xA4a\x0C\xC3V[`$5\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x04\xFDW`\xA0\x91a\x0B\xE9\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF_T\x16a\x114V[ _R`\x06` R`@_ `@Q\x90\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R`\x04\x82\x01R` \x81`$\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xFA\x80\x15a\x04\xF2W_\x90a\x0C\x90W[` \x90`@Q\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15\x15\x81R\xF3[P` \x81=` \x11a\x0C\xBBW[\x81a\x0C\xAA` \x93\x83a\x0F\x06V[\x81\x01\x03\x12a\x04\xFDW` \x90Qa\x0CmV[=\x91Pa\x0C\x9DV[`\x045\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x04\xFDWV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC``\x91\x01\x12a\x04\xFDW`\x045s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x04\xFDW\x90`$5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x04\xFDW\x90`D5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x04\xFDW\x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` `@\x94\x81\x85R\x80Q\x91\x82\x91\x82\x82\x88\x01R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC`\xA0\x91\x01\x12a\x04\xFDW`\x045s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x04\xFDW\x90`$5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x04\xFDW\x90`D5\x80`\x02\x0B\x81\x03a\x04\xFDW\x90`d5\x80`\x02\x0B\x81\x03a\x04\xFDW\x90`\x845\x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC``\x91\x01\x12a\x04\xFDW`\x045s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x04\xFDW\x90`$5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x04\xFDW\x90`D5\x90V[`\xA0\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0E\xD9W`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0E\xD9W`@RV[\x90\x81` \x91\x03\x12a\x04\xFDWQ\x80`\x02\x0B\x81\x03a\x04\xFDW\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0E\xD9W`\x1F\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16` \x01\x90V[` \x81\x83\x03\x12a\x04\xFDW\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x04\xFDW\x01\x81`\x1F\x82\x01\x12\x15a\x04\xFDW\x80Q\x90a\x0F\xCE\x82a\x0F`V[\x92a\x0F\xDC`@Q\x94\x85a\x0F\x06V[\x82\x84R` \x83\x83\x01\x01\x11a\x04\xFDW\x81_\x92` \x80\x93\x01\x83\x86\x01^\x83\x01\x01R\x90V[\x91\x90\x82`@\x91\x03\x12a\x04\xFDW` \x82Q\x92\x01Q\x90V[`\x0F\x0B\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x14a\x10BW_\x03\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[a\x10\xD5\x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF_\x93\x81`@Q\x94\x7F\xCFa\x8AU\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x87\x01R\x16`$\x85\x01R\x16`D\x83\x01R`d\x82\x01R`d\x81Ra\x05\xA0`\x84\x82a\x0F\x06V[\x03\x81\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x80\x15a\x04\xF2Wa\x11\x1EWPV[a\x111\x90=\x80_\x83>a\x06\xFE\x81\x83a\x0F\x06V[PV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x92\x93_`\x80`@Qa\x11[\x81a\x0E\xBDV[\x82\x81R\x82` \x82\x01R\x82`@\x82\x01R\x82``\x82\x01R\x01R\x81`@Q\x95a\x11\x80\x87a\x0E\xBDV[\x16\x85R\x16` \x84\x01R_`@\x84\x01R`<``\x84\x01R\x16`\x80\x82\x01R\x90V[_\x91\x80a\x11\xABWPPPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x92\x16\x90\x82;\x15a\x04\xFDW`@Q\x7F\xA5\x84\x11\x94\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x82`\x04\x82\x01R_\x81`$\x81\x83\x88Z\xF1\x80\x15a\x04\xF2Wa\x13\x1DW[P\x81;\x15a\x13\x19W\x83\x91`D\x83\x92`@Q\x94\x85\x93\x84\x92\x7F@\xC1\x0F\x19\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R\x88`\x04\x85\x01R`$\x84\x01RZ\xF1\x80\x15a\x13\x0EW\x90\x83\x91a\x12\xF5W[P\x90` \x90`\x04`@Q\x80\x94\x81\x93\x7F\x11\xDA`\xB4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83RZ\xF1\x80\x15a\x12\xEAWa\x12\xC2WPPV[` \x90\x81=\x83\x11a\x12\xE3W[a\x12\xD8\x81\x83a\x0F\x06V[\x81\x01\x03\x12a\x04\x16WPV[P=a\x12\xCEV[`@Q=\x84\x82>=\x90\xFD[\x81a\x12\xFF\x91a\x0F\x06V[a\x13\nW\x81_a\x12\x81V[P\x80\xFD[`@Q=\x85\x82>=\x90\xFD[\x83\x80\xFD[a\x13*\x91\x94P_\x90a\x0F\x06V[_\x92_a\x12-V\xFE\xA1dsolcC\0\x08\x1A\0\n",
    );
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct BalanceDelta(alloy::sol_types::private::I256);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<BalanceDelta> for alloy::sol_types::private::I256 {
            #[inline]
            fn stv_to_tokens(
                &self
            ) -> <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::Token<'_>
            {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Int<256>,
                >::stv_to_tokens(self)
            }

            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::tokenize(self).0
            }

            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }

            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::abi_encoded_size(
                    self
                )
            }
        }
        #[automatically_derived]
        impl BalanceDelta {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);

            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: alloy::sol_types::private::I256) -> Self {
                Self(value)
            }

            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> alloy::sol_types::private::I256 {
                self.0
            }

            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }

            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for BalanceDelta {
            type RustType = alloy::sol_types::private::I256;
            type Token<'a> =
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::Token<'a>;

            const ENCODED_SIZE: Option<usize> =
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Int<
                256,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            const SOL_NAME: &'static str = Self::NAME;

            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }

            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::type_check(
                    token
                )
            }

            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::detokenize(
                    token
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for BalanceDelta {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }

            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>
            ) {
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }

            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::EventTopic>::encode_topic(
                    rust
                )
            }
        }
    };
    /**Custom error with signature `CallFailed(bytes)` and selector `0xa5fa8d2b`.
    ```solidity
    error CallFailed(bytes);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct CallFailed {
        pub _0: alloy::sol_types::private::Bytes
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CallFailed> for UnderlyingRustTuple<'_> {
            fn from(value: CallFailed) -> Self {
                (value._0,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CallFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { _0: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CallFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [165u8, 250u8, 141u8, 43u8];
            const SIGNATURE: &'static str = "CallFailed(bytes)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                    &self._0
                ),)
            }
        }
    };
    /**Custom error with signature `Overflow()` and selector `0x35278d12`.
    ```solidity
    error Overflow();
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Overflow {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Overflow> for UnderlyingRustTuple<'_> {
            fn from(value: Overflow) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Overflow {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for Overflow {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [53u8, 39u8, 141u8, 18u8];
            const SIGNATURE: &'static str = "Overflow()";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Constructor`.
    ```solidity
    constructor(address uniV4);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub uniV4: alloy::sol_types::private::Address
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.uniV4,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { uniV4: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                    &self.uniV4
                ),)
            }
        }
    };
    /**Function with signature `__addLiquidity(address,address,int24,int24,uint256)` and selector `0xe73539fb`.
    ```solidity
    function __addLiquidity(address asset0, address asset1, int24 tickLower, int24 tickUpper, uint256 liquidity) external returns (BalanceDelta callerDelta, BalanceDelta feeDelta);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct __addLiquidityCall {
        pub asset0:    alloy::sol_types::private::Address,
        pub asset1:    alloy::sol_types::private::Address,
        pub tickLower: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
        pub tickUpper: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
        pub liquidity: alloy::sol_types::private::U256
    }
    ///Container type for the return parameters of the
    /// [`__addLiquidity(address,address,int24,int24,
    /// uint256)`](__addLiquidityCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct __addLiquidityReturn {
        pub callerDelta: <BalanceDelta as alloy::sol_types::SolType>::RustType,
        pub feeDelta:    <BalanceDelta as alloy::sol_types::SolType>::RustType
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Uint<256>
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
                <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::U256
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<__addLiquidityCall> for UnderlyingRustTuple<'_> {
                fn from(value: __addLiquidityCall) -> Self {
                    (value.asset0, value.asset1, value.tickLower, value.tickUpper, value.liquidity)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for __addLiquidityCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        asset0:    tuple.0,
                        asset1:    tuple.1,
                        tickLower: tuple.2,
                        tickUpper: tuple.3,
                        liquidity: tuple.4
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (BalanceDelta, BalanceDelta);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <BalanceDelta as alloy::sol_types::SolType>::RustType,
                <BalanceDelta as alloy::sol_types::SolType>::RustType
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<__addLiquidityReturn> for UnderlyingRustTuple<'_> {
                fn from(value: __addLiquidityReturn) -> Self {
                    (value.callerDelta, value.feeDelta)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for __addLiquidityReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { callerDelta: tuple.0, feeDelta: tuple.1 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for __addLiquidityCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Uint<256>
            );
            type Return = __addLiquidityReturn;
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type ReturnTuple<'a> = (BalanceDelta, BalanceDelta);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [231u8, 53u8, 57u8, 251u8];
            const SIGNATURE: &'static str = "__addLiquidity(address,address,int24,int24,uint256)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.asset0
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.asset1
                    ),
                    <alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickLower
                    ),
                    <alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickUpper
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.liquidity
                    )
                )
            }

            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `__initializePool(address,address,uint160)` and selector `0x47c7c5a9`.
    ```solidity
    function __initializePool(address asset0, address asset1, uint160 initialSqrtPriceX96) external returns (int24 tick);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct __initializePoolCall {
        pub asset0:              alloy::sol_types::private::Address,
        pub asset1:              alloy::sol_types::private::Address,
        pub initialSqrtPriceX96:
            <alloy::sol_types::sol_data::Uint<160> as alloy::sol_types::SolType>::RustType
    }
    ///Container type for the return parameters of the
    /// [`__initializePool(address,address,uint160)`](__initializePoolCall)
    /// function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct __initializePoolReturn {
        pub tick: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<160>
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                <alloy::sol_types::sol_data::Uint<160> as alloy::sol_types::SolType>::RustType
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<__initializePoolCall> for UnderlyingRustTuple<'_> {
                fn from(value: __initializePoolCall) -> Self {
                    (value.asset0, value.asset1, value.initialSqrtPriceX96)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for __initializePoolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        asset0:              tuple.0,
                        asset1:              tuple.1,
                        initialSqrtPriceX96: tuple.2
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Int<24>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (<alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<__initializePoolReturn> for UnderlyingRustTuple<'_> {
                fn from(value: __initializePoolReturn) -> Self {
                    (value.tick,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for __initializePoolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { tick: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for __initializePoolCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<160>
            );
            type Return = __initializePoolReturn;
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Int<24>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [71u8, 199u8, 197u8, 169u8];
            const SIGNATURE: &'static str = "__initializePool(address,address,uint160)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.asset0
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.asset1
                    ),
                    <alloy::sol_types::sol_data::Uint<160> as alloy_sol_types::SolType>::tokenize(
                        &self.initialSqrtPriceX96
                    )
                )
            }

            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `__mint(address,address,uint256)` and selector `0xcf618a55`.
    ```solidity
    function __mint(address to, address asset, uint256 amount) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct __mintCall {
        pub to:     alloy::sol_types::private::Address,
        pub asset:  alloy::sol_types::private::Address,
        pub amount: alloy::sol_types::private::U256
    }
    ///Container type for the return parameters of the
    /// [`__mint(address,address,uint256)`](__mintCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct __mintReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::U256
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<__mintCall> for UnderlyingRustTuple<'_> {
                fn from(value: __mintCall) -> Self {
                    (value.to, value.asset, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for __mintCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { to: tuple.0, asset: tuple.1, amount: tuple.2 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<__mintReturn> for UnderlyingRustTuple<'_> {
                fn from(value: __mintReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for __mintReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for __mintCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>
            );
            type Return = __mintReturn;
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type ReturnTuple<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [207u8, 97u8, 138u8, 85u8];
            const SIGNATURE: &'static str = "__mint(address,address,uint256)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.asset
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount
                    )
                )
            }

            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `addLiquidity(address,address,int24,int24,uint256)` and selector `0xa6c5524e`.
    ```solidity
    function addLiquidity(address asset0, address asset1, int24 tickLower, int24 tickUpper, uint256 liquidity) external returns (uint256 amount0, uint256 amount1);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct addLiquidityCall {
        pub asset0:    alloy::sol_types::private::Address,
        pub asset1:    alloy::sol_types::private::Address,
        pub tickLower: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
        pub tickUpper: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
        pub liquidity: alloy::sol_types::private::U256
    }
    ///Container type for the return parameters of the
    /// [`addLiquidity(address,address,int24,int24,uint256)`](addLiquidityCall)
    /// function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct addLiquidityReturn {
        pub amount0: alloy::sol_types::private::U256,
        pub amount1: alloy::sol_types::private::U256
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Uint<256>
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
                <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::U256
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addLiquidityCall> for UnderlyingRustTuple<'_> {
                fn from(value: addLiquidityCall) -> Self {
                    (value.asset0, value.asset1, value.tickLower, value.tickUpper, value.liquidity)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addLiquidityCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        asset0:    tuple.0,
                        asset1:    tuple.1,
                        tickLower: tuple.2,
                        tickUpper: tuple.3,
                        liquidity: tuple.4
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Uint<256>, alloy::sol_types::sol_data::Uint<256>);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::U256, alloy::sol_types::private::U256);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addLiquidityReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addLiquidityReturn) -> Self {
                    (value.amount0, value.amount1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addLiquidityReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amount0: tuple.0, amount1: tuple.1 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addLiquidityCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Uint<256>
            );
            type Return = addLiquidityReturn;
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type ReturnTuple<'a> =
                (alloy::sol_types::sol_data::Uint<256>, alloy::sol_types::sol_data::Uint<256>);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [166u8, 197u8, 82u8, 78u8];
            const SIGNATURE: &'static str = "addLiquidity(address,address,int24,int24,uint256)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.asset0
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.asset1
                    ),
                    <alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickLower
                    ),
                    <alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickUpper
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.liquidity
                    )
                )
            }

            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `hook()` and selector `0x7f5a7c7b`.
    ```solidity
    function hook() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct hookCall {}
    ///Container type for the return parameters of the [`hook()`](hookCall)
    /// function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct hookReturn {
        pub _0: alloy::sol_types::private::Address
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hookCall> for UnderlyingRustTuple<'_> {
                fn from(value: hookCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hookCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hookReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hookReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hookReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hookCall {
            type Parameters<'a> = ();
            type Return = hookReturn;
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [127u8, 90u8, 124u8, 123u8];
            const SIGNATURE: &'static str = "hook()";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }

            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `initializePool(address,address,uint160)` and selector `0x47ddb81f`.
    ```solidity
    function initializePool(address asset0, address asset1, uint160 initialSqrtPriceX96) external returns (int24 tick);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct initializePoolCall {
        pub asset0:              alloy::sol_types::private::Address,
        pub asset1:              alloy::sol_types::private::Address,
        pub initialSqrtPriceX96:
            <alloy::sol_types::sol_data::Uint<160> as alloy::sol_types::SolType>::RustType
    }
    ///Container type for the return parameters of the
    /// [`initializePool(address,address,uint160)`](initializePoolCall)
    /// function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct initializePoolReturn {
        pub tick: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<160>
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                <alloy::sol_types::sol_data::Uint<160> as alloy::sol_types::SolType>::RustType
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializePoolCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializePoolCall) -> Self {
                    (value.asset0, value.asset1, value.initialSqrtPriceX96)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializePoolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        asset0:              tuple.0,
                        asset1:              tuple.1,
                        initialSqrtPriceX96: tuple.2
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Int<24>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (<alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializePoolReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializePoolReturn) -> Self {
                    (value.tick,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializePoolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { tick: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializePoolCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<160>
            );
            type Return = initializePoolReturn;
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Int<24>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [71u8, 221u8, 184u8, 31u8];
            const SIGNATURE: &'static str = "initializePool(address,address,uint160)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.asset0
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.asset1
                    ),
                    <alloy::sol_types::sol_data::Uint<160> as alloy_sol_types::SolType>::tokenize(
                        &self.initialSqrtPriceX96
                    )
                )
            }

            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `isInitialized(address,address)` and selector `0x30315f62`.
    ```solidity
    function isInitialized(address asset0, address asset1) external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct isInitializedCall {
        pub asset0: alloy::sol_types::private::Address,
        pub asset1: alloy::sol_types::private::Address
    }
    ///Container type for the return parameters of the
    /// [`isInitialized(address,address)`](isInitializedCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct isInitializedReturn {
        pub _0: bool
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Address, alloy::sol_types::sol_data::Address);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::Address, alloy::sol_types::private::Address);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isInitializedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isInitializedCall) -> Self {
                    (value.asset0, value.asset1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isInitializedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { asset0: tuple.0, asset1: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isInitializedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isInitializedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isInitializedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isInitializedCall {
            type Parameters<'a> =
                (alloy::sol_types::sol_data::Address, alloy::sol_types::sol_data::Address);
            type Return = isInitializedReturn;
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [48u8, 49u8, 95u8, 98u8];
            const SIGNATURE: &'static str = "isInitialized(address,address)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.asset0
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.asset1
                    )
                )
            }

            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `mint(address,uint256)` and selector `0x40c10f19`.
    ```solidity
    function mint(address asset, uint256 amount) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct mint_0Call {
        pub asset:  alloy::sol_types::private::Address,
        pub amount: alloy::sol_types::private::U256
    }
    ///Container type for the return parameters of the
    /// [`mint(address,uint256)`](mint_0Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct mint_0Return {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Address, alloy::sol_types::sol_data::Uint<256>);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (alloy::sol_types::private::Address, alloy::sol_types::private::U256);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mint_0Call> for UnderlyingRustTuple<'_> {
                fn from(value: mint_0Call) -> Self {
                    (value.asset, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mint_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { asset: tuple.0, amount: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mint_0Return> for UnderlyingRustTuple<'_> {
                fn from(value: mint_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mint_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for mint_0Call {
            type Parameters<'a> =
                (alloy::sol_types::sol_data::Address, alloy::sol_types::sol_data::Uint<256>);
            type Return = mint_0Return;
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type ReturnTuple<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [64u8, 193u8, 15u8, 25u8];
            const SIGNATURE: &'static str = "mint(address,uint256)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.asset
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount
                    )
                )
            }

            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `mint(address,address,uint256)` and selector `0xc6c3bbe6`.
    ```solidity
    function mint(address to, address asset, uint256 amount) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct mint_1Call {
        pub to:     alloy::sol_types::private::Address,
        pub asset:  alloy::sol_types::private::Address,
        pub amount: alloy::sol_types::private::U256
    }
    ///Container type for the return parameters of the
    /// [`mint(address,address,uint256)`](mint_1Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct mint_1Return {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::U256
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mint_1Call> for UnderlyingRustTuple<'_> {
                fn from(value: mint_1Call) -> Self {
                    (value.to, value.asset, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mint_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { to: tuple.0, asset: tuple.1, amount: tuple.2 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mint_1Return> for UnderlyingRustTuple<'_> {
                fn from(value: mint_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mint_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for mint_1Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>
            );
            type Return = mint_1Return;
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type ReturnTuple<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [198u8, 195u8, 187u8, 230u8];
            const SIGNATURE: &'static str = "mint(address,address,uint256)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.asset
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount
                    )
                )
            }

            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setHook(address)` and selector `0x3dfd3873`.
    ```solidity
    function setHook(address hook_) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setHookCall {
        pub hook_: alloy::sol_types::private::Address
    }
    ///Container type for the return parameters of the
    /// [`setHook(address)`](setHookCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setHookReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setHookCall> for UnderlyingRustTuple<'_> {
                fn from(value: setHookCall) -> Self {
                    (value.hook_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setHookCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { hook_: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setHookReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setHookReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setHookReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setHookCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Return = setHookReturn;
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type ReturnTuple<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [61u8, 253u8, 56u8, 115u8];
            const SIGNATURE: &'static str = "setHook(address)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                    &self.hook_
                ),)
            }

            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `unlockCallback(bytes)` and selector `0x91dd7346`.
    ```solidity
    function unlockCallback(bytes memory data) external returns (bytes memory);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct unlockCallbackCall {
        pub data: alloy::sol_types::private::Bytes
    }
    ///Container type for the return parameters of the
    /// [`unlockCallback(bytes)`](unlockCallbackCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct unlockCallbackReturn {
        pub _0: alloy::sol_types::private::Bytes
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unlockCallbackCall> for UnderlyingRustTuple<'_> {
                fn from(value: unlockCallbackCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unlockCallbackCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unlockCallbackReturn> for UnderlyingRustTuple<'_> {
                fn from(value: unlockCallbackReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unlockCallbackReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for unlockCallbackCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Return = unlockCallbackReturn;
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;

            const SELECTOR: [u8; 4] = [145u8, 221u8, 115u8, 70u8];
            const SIGNATURE: &'static str = "unlockCallback(bytes)";

            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType
            ) -> Self {
                tuple.into()
            }

            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                    &self.data
                ),)
            }

            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`PoolGate`](self) function calls.
    pub enum PoolGateCalls {
        __addLiquidity(__addLiquidityCall),
        __initializePool(__initializePoolCall),
        __mint(__mintCall),
        addLiquidity(addLiquidityCall),
        hook(hookCall),
        initializePool(initializePoolCall),
        isInitialized(isInitializedCall),
        mint_0(mint_0Call),
        mint_1(mint_1Call),
        setHook(setHookCall),
        unlockCallback(unlockCallbackCall)
    }
    #[automatically_derived]
    impl PoolGateCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the
        /// variants. No guarantees are made about the order of the
        /// selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [48u8, 49u8, 95u8, 98u8],
            [61u8, 253u8, 56u8, 115u8],
            [64u8, 193u8, 15u8, 25u8],
            [71u8, 199u8, 197u8, 169u8],
            [71u8, 221u8, 184u8, 31u8],
            [127u8, 90u8, 124u8, 123u8],
            [145u8, 221u8, 115u8, 70u8],
            [166u8, 197u8, 82u8, 78u8],
            [198u8, 195u8, 187u8, 230u8],
            [207u8, 97u8, 138u8, 85u8],
            [231u8, 53u8, 57u8, 251u8]
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for PoolGateCalls {
        const COUNT: usize = 11usize;
        const MIN_DATA_LENGTH: usize = 0usize;
        const NAME: &'static str = "PoolGateCalls";

        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::__addLiquidity(_) => {
                    <__addLiquidityCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::__initializePool(_) => {
                    <__initializePoolCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::__mint(_) => <__mintCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::addLiquidity(_) => <addLiquidityCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::hook(_) => <hookCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::initializePool(_) => {
                    <initializePoolCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isInitialized(_) => <isInitializedCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::mint_0(_) => <mint_0Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::mint_1(_) => <mint_1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::setHook(_) => <setHookCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::unlockCallback(_) => {
                    <unlockCallbackCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }

        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }

        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }

        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(&[u8], bool) -> alloy_sol_types::Result<PoolGateCalls>] = &[
                {
                    fn isInitialized(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<PoolGateCalls> {
                        <isInitializedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate
                        )
                        .map(PoolGateCalls::isInitialized)
                    }
                    isInitialized
                },
                {
                    fn setHook(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<PoolGateCalls> {
                        <setHookCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(PoolGateCalls::setHook)
                    }
                    setHook
                },
                {
                    fn mint_0(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<PoolGateCalls> {
                        <mint_0Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(PoolGateCalls::mint_0)
                    }
                    mint_0
                },
                {
                    fn __initializePool(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<PoolGateCalls> {
                        <__initializePoolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate
                        )
                        .map(PoolGateCalls::__initializePool)
                    }
                    __initializePool
                },
                {
                    fn initializePool(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<PoolGateCalls> {
                        <initializePoolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate
                        )
                        .map(PoolGateCalls::initializePool)
                    }
                    initializePool
                },
                {
                    fn hook(data: &[u8], validate: bool) -> alloy_sol_types::Result<PoolGateCalls> {
                        <hookCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(PoolGateCalls::hook)
                    }
                    hook
                },
                {
                    fn unlockCallback(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<PoolGateCalls> {
                        <unlockCallbackCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate
                        )
                        .map(PoolGateCalls::unlockCallback)
                    }
                    unlockCallback
                },
                {
                    fn addLiquidity(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<PoolGateCalls> {
                        <addLiquidityCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate
                        )
                        .map(PoolGateCalls::addLiquidity)
                    }
                    addLiquidity
                },
                {
                    fn mint_1(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<PoolGateCalls> {
                        <mint_1Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(PoolGateCalls::mint_1)
                    }
                    mint_1
                },
                {
                    fn __mint(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<PoolGateCalls> {
                        <__mintCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(PoolGateCalls::__mint)
                    }
                    __mint
                },
                {
                    fn __addLiquidity(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<PoolGateCalls> {
                        <__addLiquidityCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate
                        )
                        .map(PoolGateCalls::__addLiquidity)
                    }
                    __addLiquidity
                }
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }

        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::__addLiquidity(inner) => {
                    <__addLiquidityCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::__initializePool(inner) => {
                    <__initializePoolCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::__mint(inner) => {
                    <__mintCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::addLiquidity(inner) => {
                    <addLiquidityCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hook(inner) => {
                    <hookCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initializePool(inner) => {
                    <initializePoolCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isInitialized(inner) => {
                    <isInitializedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::mint_0(inner) => {
                    <mint_0Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::mint_1(inner) => {
                    <mint_1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setHook(inner) => {
                    <setHookCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::unlockCallback(inner) => {
                    <unlockCallbackCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }

        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::__addLiquidity(inner) => {
                    <__addLiquidityCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::__initializePool(inner) => {
                    <__initializePoolCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::__mint(inner) => {
                    <__mintCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::addLiquidity(inner) => {
                    <addLiquidityCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::hook(inner) => {
                    <hookCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::initializePool(inner) => {
                    <initializePoolCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::isInitialized(inner) => {
                    <isInitializedCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::mint_0(inner) => {
                    <mint_0Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::mint_1(inner) => {
                    <mint_1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setHook(inner) => {
                    <setHookCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::unlockCallback(inner) => {
                    <unlockCallbackCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`PoolGate`](self) custom errors.
    pub enum PoolGateErrors {
        CallFailed(CallFailed),
        Overflow(Overflow)
    }
    #[automatically_derived]
    impl PoolGateErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the
        /// variants. No guarantees are made about the order of the
        /// selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] =
            &[[53u8, 39u8, 141u8, 18u8], [165u8, 250u8, 141u8, 43u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for PoolGateErrors {
        const COUNT: usize = 2usize;
        const MIN_DATA_LENGTH: usize = 0usize;
        const NAME: &'static str = "PoolGateErrors";

        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::CallFailed(_) => <CallFailed as alloy_sol_types::SolError>::SELECTOR,
                Self::Overflow(_) => <Overflow as alloy_sol_types::SolError>::SELECTOR
            }
        }

        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }

        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }

        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(&[u8], bool) -> alloy_sol_types::Result<PoolGateErrors>] = &[
                {
                    fn Overflow(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<PoolGateErrors> {
                        <Overflow as alloy_sol_types::SolError>::abi_decode_raw(data, validate)
                            .map(PoolGateErrors::Overflow)
                    }
                    Overflow
                },
                {
                    fn CallFailed(
                        data: &[u8],
                        validate: bool
                    ) -> alloy_sol_types::Result<PoolGateErrors> {
                        <CallFailed as alloy_sol_types::SolError>::abi_decode_raw(data, validate)
                            .map(PoolGateErrors::CallFailed)
                    }
                    CallFailed
                }
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }

        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::CallFailed(inner) => {
                    <CallFailed as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::Overflow(inner) => {
                    <Overflow as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }

        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::CallFailed(inner) => {
                    <CallFailed as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::Overflow(inner) => {
                    <Overflow as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`PoolGate`](self) contract instance.

    See the [wrapper's documentation](`PoolGateInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network
    >(
        address: alloy_sol_types::private::Address,
        provider: P
    ) -> PoolGateInstance<T, P, N> {
        PoolGateInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network
    >(
        provider: P,
        uniV4: alloy::sol_types::private::Address
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<PoolGateInstance<T, P, N>>>
    {
        PoolGateInstance::<T, P, N>::deploy(provider, uniV4)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network
    >(
        provider: P,
        uniV4: alloy::sol_types::private::Address
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        PoolGateInstance::<T, P, N>::deploy_builder(provider, uniV4)
    }
    /**A [`PoolGate`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`PoolGate`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct PoolGateInstance<T, P, N = alloy_contract::private::Ethereum> {
        address:            alloy_sol_types::private::Address,
        provider:           P,
        _network_transport: ::core::marker::PhantomData<(N, T)>
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for PoolGateInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("PoolGateInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network
        > PoolGateInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`PoolGate`](self) contract instance.

        See the [wrapper's documentation](`PoolGateInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self { address, provider, _network_transport: ::core::marker::PhantomData }
        }

        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            uniV4: alloy::sol_types::private::Address
        ) -> alloy_contract::Result<PoolGateInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, uniV4);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }

        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            uniV4: alloy::sol_types::private::Address
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(&constructorCall { uniV4 })[..]
                ]
                .concat()
                .into()
            )
        }

        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }

        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }

        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }

        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> PoolGateInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned
        /// provider.
        #[inline]
        pub fn with_cloned_provider(self) -> PoolGateInstance<T, P, N> {
            PoolGateInstance {
                address:            self.address,
                provider:           ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network
        > PoolGateInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider
        /// and address.
        ///
        /// Note that the call can be any function call, not just those defined
        /// in this contract. Prefer using the other methods for
        /// building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }

        ///Creates a new call builder for the [`__addLiquidity`] function.
        pub fn __addLiquidity(
            &self,
            asset0: alloy::sol_types::private::Address,
            asset1: alloy::sol_types::private::Address,
            tickLower: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
            tickUpper: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
            liquidity: alloy::sol_types::private::U256
        ) -> alloy_contract::SolCallBuilder<T, &P, __addLiquidityCall, N> {
            self.call_builder(&__addLiquidityCall {
                asset0,
                asset1,
                tickLower,
                tickUpper,
                liquidity
            })
        }

        ///Creates a new call builder for the [`__initializePool`] function.
        pub fn __initializePool(
            &self,
            asset0: alloy::sol_types::private::Address,
            asset1: alloy::sol_types::private::Address,
            initialSqrtPriceX96: <alloy::sol_types::sol_data::Uint<
                160,
            > as alloy::sol_types::SolType>::RustType
        ) -> alloy_contract::SolCallBuilder<T, &P, __initializePoolCall, N> {
            self.call_builder(&__initializePoolCall { asset0, asset1, initialSqrtPriceX96 })
        }

        ///Creates a new call builder for the [`__mint`] function.
        pub fn __mint(
            &self,
            to: alloy::sol_types::private::Address,
            asset: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::U256
        ) -> alloy_contract::SolCallBuilder<T, &P, __mintCall, N> {
            self.call_builder(&__mintCall { to, asset, amount })
        }

        ///Creates a new call builder for the [`addLiquidity`] function.
        pub fn addLiquidity(
            &self,
            asset0: alloy::sol_types::private::Address,
            asset1: alloy::sol_types::private::Address,
            tickLower: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
            tickUpper: <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
            liquidity: alloy::sol_types::private::U256
        ) -> alloy_contract::SolCallBuilder<T, &P, addLiquidityCall, N> {
            self.call_builder(&addLiquidityCall { asset0, asset1, tickLower, tickUpper, liquidity })
        }

        ///Creates a new call builder for the [`hook`] function.
        pub fn hook(&self) -> alloy_contract::SolCallBuilder<T, &P, hookCall, N> {
            self.call_builder(&hookCall {})
        }

        ///Creates a new call builder for the [`initializePool`] function.
        pub fn initializePool(
            &self,
            asset0: alloy::sol_types::private::Address,
            asset1: alloy::sol_types::private::Address,
            initialSqrtPriceX96: <alloy::sol_types::sol_data::Uint<
                160,
            > as alloy::sol_types::SolType>::RustType
        ) -> alloy_contract::SolCallBuilder<T, &P, initializePoolCall, N> {
            self.call_builder(&initializePoolCall { asset0, asset1, initialSqrtPriceX96 })
        }

        ///Creates a new call builder for the [`isInitialized`] function.
        pub fn isInitialized(
            &self,
            asset0: alloy::sol_types::private::Address,
            asset1: alloy::sol_types::private::Address
        ) -> alloy_contract::SolCallBuilder<T, &P, isInitializedCall, N> {
            self.call_builder(&isInitializedCall { asset0, asset1 })
        }

        ///Creates a new call builder for the [`mint_0`] function.
        pub fn mint_0(
            &self,
            asset: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::U256
        ) -> alloy_contract::SolCallBuilder<T, &P, mint_0Call, N> {
            self.call_builder(&mint_0Call { asset, amount })
        }

        ///Creates a new call builder for the [`mint_1`] function.
        pub fn mint_1(
            &self,
            to: alloy::sol_types::private::Address,
            asset: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::U256
        ) -> alloy_contract::SolCallBuilder<T, &P, mint_1Call, N> {
            self.call_builder(&mint_1Call { to, asset, amount })
        }

        ///Creates a new call builder for the [`setHook`] function.
        pub fn setHook(
            &self,
            hook_: alloy::sol_types::private::Address
        ) -> alloy_contract::SolCallBuilder<T, &P, setHookCall, N> {
            self.call_builder(&setHookCall { hook_ })
        }

        ///Creates a new call builder for the [`unlockCallback`] function.
        pub fn unlockCallback(
            &self,
            data: alloy::sol_types::private::Bytes
        ) -> alloy_contract::SolCallBuilder<T, &P, unlockCallbackCall, N> {
            self.call_builder(&unlockCallbackCall { data })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network
        > PoolGateInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider
        /// and address.
        ///
        /// Note that the type can be any event, not just those defined in this
        /// contract. Prefer using the other methods for building
        /// type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
